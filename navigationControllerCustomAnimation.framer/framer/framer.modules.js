require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"navigationController":[function(require,module,exports){
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

exports.NavigationController = (function(superClass) {
  var _ANIMATION_CURVE, _ANIMATION_TIME, navigationControllersCounter;

  extend(NavigationController, superClass);

  _ANIMATION_TIME = 2.4;

  _ANIMATION_CURVE = "cubic-bezier(.6, .1, .3, 1)";

  navigationControllersCounter = 1;

  function NavigationController(options) {
    var base, base1, base2, base3, base4;
    this.options = options != null ? options : {};
    if (!this.options.initialLayer) {
      throw new Error("Can't initialize NavigationController: parameter 'initialLayer' is required.");
      return;
    }
    if ((base = this.options).width == null) {
      base.width = Screen.width;
    }
    if ((base1 = this.options).height == null) {
      base1.height = Screen.height;
    }
    if ((base2 = this.options).clip == null) {
      base2.clip = true;
    }
    if ((base3 = this.options).backgroundColor == null) {
      base3.backgroundColor = "transparent";
    }
    if ((base4 = this.options).name == null) {
      base4.name = "NavigationController " + navigationControllersCounter;
    }
    NavigationController.__super__.constructor.call(this, this.options);
    navigationControllersCounter++;
    this.navigationLayers = [];
    this.animationTime = this.options.animationTime || _ANIMATION_TIME;
    this.animationPush = this.options.animationPush || this._defaultAnimationPush;
    this.animationPop = this.options.animationPop || this._defaultAnimationPop;
    this.currentLayerIndex = -1;
    this.lock = false;
    if (this.options.headerLayer) {
      this.headerLayer = this.options.headerLayer;
      this.addSubLayer(this.headerLayer);
    } else {
      this.headerLayer = new Layer({
        width: this.width,
        height: 88,
        backgroundColor: "rgba(248, 248, 248, 0.9)"
      });
      if (Framer.Device.deviceType.indexOf("iphone-6plus") >= 0) {
        this.headerLayer.height = 132;
      }
      this.headerLayer.style = {
        "font-size": this.headerLayer.height / 2.5 + "px",
        "color": "black",
        "line-height": this.headerLayer.height + "px",
        "font-weight": "500",
        "text-align": "center",
        "font-family": "'Helvetica Neue', Helvetica, Arial, sans-serif"
      };
    }
    if (this.options.initialLayer) {
      this.navigationLayers = [this.options.initialLayer];
      this.currentLayerIndex = 0;
      this.addSubLayer(this.options.initialLayer);
      if (this.options.initialLayer.title) {
        this.headerLayer.html = this.options.initialLayer.title;
      }
    }
  }

  NavigationController.prototype.push = function(layer) {
    var currentLayer, nextLayer;
    if (!this.lock) {
      this.lock = true;
      this.navigationLayers.push(layer);
      this.addSubLayer(layer);
      currentLayer = this.navigationLayers[this.currentLayerIndex];
      nextLayer = layer;
      if (typeof currentLayer.layerWillDisappear === "function") {
        currentLayer.layerWillDisappear();
      }
      if (typeof nextLayer.layerWillAppear === "function") {
        nextLayer.layerWillAppear();
      }
      this.currentLayerIndex++;
      this.animationPush(currentLayer, nextLayer);
      return Utils.delay(this.animationTime, (function(_this) {
        return function() {
          return _this.lock = false;
        };
      })(this));
    } else {
      return layer.destroy();
    }
  };

  NavigationController.prototype.pop = function() {
    var currentLayer, nextLayer;
    if (!this.lock) {
      this.lock = true;
      if (this.currentLayerIndex > 0) {
        currentLayer = this.navigationLayers[this.currentLayerIndex];
        nextLayer = this.navigationLayers[this.currentLayerIndex - 1];
        if (typeof currentLayer.layerWillDisappear === "function") {
          currentLayer.layerWillDisappear();
        }
        if (typeof nextLayer.layerWillAppear === "function") {
          nextLayer.layerWillAppear();
        }
        this.animationPop(currentLayer, nextLayer);
        return Utils.delay(this.animationTime, (function(_this) {
          return function() {
            _this.navigationLayers.pop(currentLayer);
            _this.currentLayerIndex--;
            currentLayer.destroy();
            return _this.lock = false;
          };
        })(this));
      } else {
        return this.lock = false;
      }
    }
  };

  NavigationController.prototype._defaultAnimationPush = function(fromLayer, toLayer) {
    var shadowLayer;
    shadowLayer = new Layer({
      superLayer: fromLayer,
      width: fromLayer.width,
      height: fromLayer.height,
      name: "shadowLayer",
      backgroundColor: "black",
      opacity: 0
    });
    shadowLayer.animate({
      properties: {
        opacity: 0.2
      },
      curve: _ANIMATION_CURVE,
      time: _ANIMATION_TIME
    });
    fromLayer.animate({
      properties: {
        x: -this.width * 0.25
      },
      curve: _ANIMATION_CURVE,
      time: _ANIMATION_TIME
    });
    toLayer.shadowColor = "rgba(0,0,0,0.2)";
    toLayer.shadowX = -10;
    toLayer.shadowBlur = 14;
    toLayer.x = this.width + (-toLayer.shadowX);
    toLayer.animate({
      properties: {
        x: 0
      },
      curve: _ANIMATION_CURVE,
      time: _ANIMATION_TIME
    });
    if (toLayer.title) {
      return this.headerLayer.html = toLayer.title;
    }
  };

  NavigationController.prototype._defaultAnimationPop = function(fromLayer, toLayer) {
    var shadowLayer, shadowLayerAnimation;
    fromLayer.animate({
      properties: {
        x: this.width + (-fromLayer.shadowX)
      },
      curve: _ANIMATION_CURVE,
      time: _ANIMATION_TIME
    });
    toLayer.animate({
      properties: {
        x: 0
      },
      curve: _ANIMATION_CURVE,
      time: _ANIMATION_TIME
    });
    shadowLayer = toLayer.subLayersByName("shadowLayer")[0];
    shadowLayerAnimation = new Animation({
      layer: shadowLayer,
      properties: {
        opacity: 0
      },
      curve: _ANIMATION_CURVE,
      time: _ANIMATION_TIME
    });
    shadowLayerAnimation.start();
    shadowLayerAnimation.on("end", function() {
      return shadowLayer.destroy();
    });
    if (toLayer.title) {
      return this.headerLayer.html = toLayer.title;
    }
  };

  return NavigationController;

})(Layer);



},{}]},{},[])
//# sourceMappingURL=data:application/json;base64,
