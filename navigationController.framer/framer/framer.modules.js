require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"myModule":[function(require,module,exports){
exports.myVar = "myVariable";

exports.myFunction = function() {
  return print("myFunction is running");
};

exports.myArray = [1, 2, 3];



},{}],"navigationController":[function(require,module,exports){
exports.NavigationController = (function() {
  var _ANIMATION_CURVE, _ANIMATION_TIME;

  _ANIMATION_TIME = 0.4;

  _ANIMATION_CURVE = "cubic-bezier(.6, .1, .3, 1)";

  function NavigationController(options) {
    var base, base1, base2, base3, that;
    this.options = options != null ? options : {};
    if ((base = this.options).width == null) {
      base.width = Screen.width;
    }
    if ((base1 = this.options).height == null) {
      base1.height = Screen.height;
    }
    if ((base2 = this.options).clip == null) {
      base2.clip = true;
    }
    if ((base3 = this.options).backgroundColor == null) {
      base3.backgroundColor = "transparent";
    }
    this.navigationContainer = new Layer(this.options);
    this.navigationLayers = [];
    this.animationTime = this.options.animationTime || _ANIMATION_TIME;
    this.animationPush = this.options.animationPush || this._defaultAnimationPush;
    this.animationPop = this.options.animationPop || this._defaultAnimationPop;
    this.currentLayerIndex = -1;
    this.lock = false;
    if (this.options.initialLayer) {
      this.navigationLayers = [this.options.initialLayer];
      this.currentLayerIndex = 0;
      this.navigationContainer.addSubLayer(this.options.initialLayer);
    }
    if (this.options.headerLayer) {
      this.headerLayer = this.options.headerLayer;
      this.navigationContainer.addSubLayer(this.headerLayer);
      that = this;
      this.headerLayer.on(Events.Click, function() {
        return that.popLayer();
      });
    }
  }

  NavigationController.prototype.pushLayer = function(layer) {
    var animationContext, currentLayer, nextLayer;
    if (!this.lock) {
      this.lock = true;
      layer.x = this.navigationContainer.width;
      this.navigationLayers.push(layer);
      this.navigationContainer.addSubLayer(layer);
      currentLayer = this.navigationLayers[this.currentLayerIndex];
      nextLayer = layer;
      if (typeof currentLayer.layerWillDisappear === "function") {
        currentLayer.layerWillDisappear();
      }
      if (typeof nextLayer.layerWillAppear === "function") {
        nextLayer.layerWillAppear();
      }
      this.currentLayerIndex++;
      animationContext = {
        fromLayer: currentLayer,
        toLayer: nextLayer
      };
      this.animationPush(animationContext);
      return Utils.delay(this.animationTime, (function(_this) {
        return function() {
          return _this.lock = false;
        };
      })(this));
    } else {
      return layer.destroy();
    }
  };

  NavigationController.prototype.popLayer = function() {
    var animationContext, currentLayer, nextLayer;
    if (!this.lock) {
      this.lock = true;
      if (this.currentLayerIndex > 0) {
        currentLayer = this.navigationLayers[this.currentLayerIndex];
        nextLayer = this.navigationLayers[this.currentLayerIndex - 1];
        if (typeof currentLayer.layerWillDisappear === "function") {
          currentLayer.layerWillDisappear();
        }
        if (typeof nextLayer.layerWillAppear === "function") {
          nextLayer.layerWillAppear();
        }
        animationContext = {
          fromLayer: currentLayer,
          toLayer: nextLayer
        };
        this.animationPop(animationContext);
        return Utils.delay(this.animationTime, (function(_this) {
          return function() {
            _this.navigationLayers.pop(currentLayer);
            _this.currentLayerIndex--;
            currentLayer.destroy();
            return _this.lock = false;
          };
        })(this));
      } else {
        return this.lock = false;
      }
    }
  };

  NavigationController.prototype._defaultAnimationPush = function(animationContext) {
    animationContext.fromLayer.animate({
      properties: {
        x: -this.navigationContainer.width * 0.25
      },
      curve: _ANIMATION_CURVE,
      time: _ANIMATION_TIME
    });
    return animationContext.toLayer.animate({
      properties: {
        x: 0
      },
      curve: _ANIMATION_CURVE,
      time: _ANIMATION_TIME
    });
  };

  NavigationController.prototype._defaultAnimationPop = function(animationContext) {
    animationContext.fromLayer.animate({
      properties: {
        x: this.navigationContainer.width
      },
      curve: _ANIMATION_CURVE,
      time: _ANIMATION_TIME
    });
    return animationContext.toLayer.animate({
      properties: {
        x: 0
      },
      curve: _ANIMATION_CURVE,
      time: _ANIMATION_TIME
    });
  };

  return NavigationController;

})();



},{}]},{},[])
//# sourceMappingURL=data:application/json;base64,
