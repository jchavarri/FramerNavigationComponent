require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"navigationComponent":[function(require,module,exports){
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

exports.NavigationComponent = (function(superClass) {
  var _ANIMATION_CURVE, _ANIMATION_TIME, _LEFT_PADDING, navigationComponentsCounter;

  extend(NavigationComponent, superClass);

  _ANIMATION_TIME = 0.4;

  _ANIMATION_CURVE = "cubic-bezier(.6, .1, .3, 1)";

  _LEFT_PADDING = Framer.Device.deviceType.indexOf("iphone-6plus") === -1 ? 46 : 69;

  navigationComponentsCounter = 1;

  function NavigationComponent(options) {
    var backArrow, base, base1, base2, base3, base4, leftLayer, titleLayer;
    this.options = options != null ? options : {};
    if (!this.options.rootLayer) {
      throw new Error("Can't initialize NavigationComponent: parameter 'rootLayer' is required.");
      return;
    }
    if ((base = this.options).width == null) {
      base.width = Screen.width;
    }
    if ((base1 = this.options).height == null) {
      base1.height = Screen.height;
    }
    if ((base2 = this.options).clip == null) {
      base2.clip = true;
    }
    if ((base3 = this.options).backgroundColor == null) {
      base3.backgroundColor = "transparent";
    }
    if ((base4 = this.options).name == null) {
      base4.name = "Navigation Component " + navigationComponentsCounter;
    }
    NavigationComponent.__super__.constructor.call(this, this.options);
    navigationComponentsCounter++;
    this.navigationLayers = [];
    this.headerLayer = null;
    this.animationTime = this.options.animationTime || _ANIMATION_TIME;
    this.animationPush = this.options.animationPush || this._defaultAnimationPush;
    this.animationPop = this.options.animationPop || this._defaultAnimationPop;
    this.currentLayerIndex = -1;
    this.lock = false;
    this.customHeader = false;
    if (this.options.headerLayer) {
      this.headerLayer = this.options.headerLayer;
      this.addSubLayer(this.headerLayer);
      this.customHeader = true;
    } else {
      this.headerLayer = new Layer({
        superLayer: this,
        name: "Header Layer",
        width: this.width,
        height: 88,
        clip: false,
        backgroundColor: "rgba(248, 248, 248, 0.9)"
      });
      this.headerLayer.style["background-image"] = "linear-gradient(0deg, rgb(200, 199, 204), rgb(200, 199, 204) 50%, transparent 50%)";
      this.headerLayer.style["background-size"] = "100% 1px";
      this.headerLayer.style["background-repeat"] = "no-repeat";
      this.headerLayer.style["background-position"] = "bottom";
      titleLayer = new Layer({
        superLayer: this.headerLayer,
        name: "Title Layer",
        width: this.headerLayer.width / 2,
        height: this.headerLayer.height,
        backgroundColor: ""
      });
      titleLayer.centerX();
      titleLayer.style = {
        "font-size": "34px",
        "color": "black",
        "line-height": this.headerLayer.height + "px",
        "font-weight": "500",
        "text-align": "center",
        "font-family": "'Helvetica Neue', Helvetica, Arial, sans-serif",
        "white-space": "nowrap",
        "height": this.headerLayer.height + "px"
      };
      leftLayer = new Layer({
        superLayer: this.headerLayer,
        name: "Left Layer",
        width: 140,
        height: this.headerLayer.height,
        backgroundColor: "",
        opacity: 0,
        x: _LEFT_PADDING
      });
      leftLayer.style = {
        "font-size": "34px",
        "color": "rgb(21, 125, 251)",
        "line-height": this.headerLayer.height + "px",
        "font-weight": "300",
        "text-align": "left",
        "font-family": "'Helvetica Neue', Helvetica, Arial, sans-serif",
        "white-space": "nowrap",
        "height": this.headerLayer.height + "px"
      };
      leftLayer.on(Events.Click, (function(_this) {
        return function() {
          return _this.pop();
        };
      })(this));
      backArrow = new Layer({
        superLayer: this.headerLayer,
        name: "Back Arrow",
        originX: 0,
        originY: 0,
        backgroundColor: "",
        opacity: 0,
        html: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' width='46px' height='88px' viewBox='0 0 46 88' enable-background='new 0 0 46 88' xml:space='preserve'> <polygon fill='#157DFB' points='36.51,64.51 40.61,60.4 24.2,44 40.61,27.59 36.51,23.49 20.1,39.9 16,44 20.1,48.1 20.1,48.1 '/> </svg>"
      });
      backArrow.on(Events.Click, (function(_this) {
        return function() {
          return _this.pop();
        };
      })(this));
      this.headerLayer.titleLayer = titleLayer;
      this.headerLayer.backArrow = backArrow;
      this.headerLayer.leftLayer = leftLayer;
      if (Framer.Device.deviceType.indexOf("iphone-6plus") >= 0) {
        this.headerLayer.height = 132;
        titleLayer.height = 132;
        titleLayer.style["font-size"] = "48px";
        titleLayer.style["line-height"] = titleLayer.height + "px";
        leftLayer.height = 132;
        leftLayer.style["font-size"] = "48px";
        leftLayer.style["line-height"] = titleLayer.height + "px";
        leftLayer.width = leftLayer.width * 1.5;
        backArrow.scale = 1.5;
      }
    }
    if (this.options.rootLayer) {
      this.navigationLayers = [this.options.rootLayer];
      this.currentLayerIndex = 0;
      this.addSubLayer(this.options.rootLayer);
      this.headerLayer.bringToFront();
      if (this.options.rootLayer.title && this.headerLayer.titleLayer) {
        this.headerLayer.titleLayer.html = "<div style=\"overflow: hidden; text-overflow: ellipsis\">" + this.options.rootLayer.title + "</div>";
      }
    }
  }

  NavigationComponent.prototype.push = function(layer) {
    var currentLayer, nextLayer;
    if (!this.lock) {
      this.lock = true;
      this.navigationLayers.push(layer);
      this.addSubLayer(layer);
      if (this.headerLayer) {
        this.headerLayer.bringToFront();
      }
      currentLayer = this.navigationLayers[this.currentLayerIndex];
      nextLayer = layer;
      if (typeof currentLayer.layerWillDisappear === "function") {
        currentLayer.layerWillDisappear();
      }
      if (typeof nextLayer.layerWillAppear === "function") {
        nextLayer.layerWillAppear();
      }
      this.currentLayerIndex++;
      this.animationPush(currentLayer, nextLayer);
      this._defaultHeaderAnimationPush(currentLayer, nextLayer);
      return Utils.delay(this.animationTime, (function(_this) {
        return function() {
          currentLayer.visible = false;
          return _this.lock = false;
        };
      })(this));
    } else {
      return layer.destroy();
    }
  };

  NavigationComponent.prototype.pop = function() {
    return this.popToLayerAtIndex(this.currentLayerIndex - 1);
  };

  NavigationComponent.prototype.popToRootLayer = function() {
    return this.popToLayerAtIndex(0);
  };

  NavigationComponent.prototype.popToLayerAtIndex = function(index) {
    var currentLayer, nextLayer;
    if (!this.lock) {
      this.lock = true;
      if (this.currentLayerIndex > 0 && ((0 <= index && index <= this.navigationLayers.length))) {
        currentLayer = this.navigationLayers[this.currentLayerIndex];
        nextLayer = this.navigationLayers[index];
        nextLayer.visible = true;
        if (typeof currentLayer.layerWillDisappear === "function") {
          currentLayer.layerWillDisappear();
        }
        if (typeof nextLayer.layerWillAppear === "function") {
          nextLayer.layerWillAppear();
        }
        this.animationPop(currentLayer, nextLayer);
        this._defaultHeaderAnimationPop(currentLayer, nextLayer, index);
        return Utils.delay(this.animationTime, (function(_this) {
          return function() {
            var i, indexToBeDeleted, layerToBeDeleted, ref, ref1;
            for (indexToBeDeleted = i = ref = _this.navigationLayers.length - 1, ref1 = index + 1; ref <= ref1 ? i <= ref1 : i >= ref1; indexToBeDeleted = ref <= ref1 ? ++i : --i) {
              layerToBeDeleted = _this.navigationLayers[indexToBeDeleted];
              layerToBeDeleted.destroy();
              _this.navigationLayers.pop();
            }
            _this.currentLayerIndex = index;
            return _this.lock = false;
          };
        })(this));
      } else {
        return this.lock = false;
      }
    }
  };

  NavigationComponent.prototype._animateHeaderSubLayer = function(subLayerName, fromLayer, toLayer, newTitle, currentToX, newFromX) {
    var headerSubLayer, newHeaderSubLayer, newHeaderSubLayerAnimation, origSubLayerX;
    if (this.headerLayer[subLayerName]) {
      headerSubLayer = this.headerLayer[subLayerName];
      origSubLayerX = headerSubLayer.x;
      headerSubLayer.animate({
        properties: {
          opacity: 0,
          x: currentToX
        },
        curve: _ANIMATION_CURVE,
        time: _ANIMATION_TIME
      });
      if (newTitle !== void 0) {
        newHeaderSubLayer = headerSubLayer.copy();
        newHeaderSubLayer.style = headerSubLayer.style;
        this.headerLayer.addSubLayer(newHeaderSubLayer);
        newHeaderSubLayer.name = "tmp " + subLayerName;
        newHeaderSubLayer.x = newFromX;
        newHeaderSubLayer.opacity = 0;
        newHeaderSubLayer.html = "<div style=\"overflow: hidden; text-overflow: ellipsis\">" + newTitle + "</div>";
        newHeaderSubLayerAnimation = new Animation({
          layer: newHeaderSubLayer,
          properties: {
            opacity: 1,
            x: origSubLayerX
          },
          curve: _ANIMATION_CURVE,
          time: _ANIMATION_TIME
        });
        newHeaderSubLayerAnimation.start();
        return newHeaderSubLayerAnimation.on("end", function() {
          headerSubLayer.html = newHeaderSubLayer.html;
          headerSubLayer.opacity = 1;
          headerSubLayer.x = origSubLayerX;
          return newHeaderSubLayer.destroy();
        });
      }
    }
  };

  NavigationComponent.prototype._defaultHeaderAnimationPush = function(fromLayer, toLayer) {
    if (this.headerLayer && !this.customHeader) {
      this._animateHeaderSubLayer("titleLayer", fromLayer, toLayer, toLayer.title, -_LEFT_PADDING, this.headerLayer.width);
      this._animateHeaderSubLayer("leftLayer", fromLayer, toLayer, fromLayer.title, -this.headerLayer.width / 2, this.headerLayer.width / 2);
      if (this.headerLayer.backArrow) {
        return this.headerLayer.backArrow.animate({
          properties: {
            opacity: 1
          },
          curve: _ANIMATION_CURVE,
          time: _ANIMATION_TIME
        });
      }
    }
  };

  NavigationComponent.prototype._defaultHeaderAnimationPop = function(fromLayer, toLayer, index) {
    var newLeftLayerTitle;
    if (this.headerLayer && !this.customHeader) {
      this._animateHeaderSubLayer("titleLayer", fromLayer, toLayer, toLayer.title, this.headerLayer.width, 0);
      newLeftLayerTitle = "";
      if (this.navigationLayers[index - 1] && this.navigationLayers[index - 1].title) {
        newLeftLayerTitle = this.navigationLayers[index - 1].title;
      } else {
        if (this.headerLayer.backArrow) {
          this.headerLayer.backArrow.animate({
            properties: {
              opacity: 0
            },
            curve: _ANIMATION_CURVE,
            time: _ANIMATION_TIME
          });
        }
      }
      return this._animateHeaderSubLayer("leftLayer", fromLayer, toLayer, newLeftLayerTitle, this.headerLayer.width / 2, -this.headerLayer.width / 2);
    }
  };

  NavigationComponent.prototype._defaultAnimationPush = function(fromLayer, toLayer) {
    var shadowLayer;
    shadowLayer = new Layer({
      superLayer: fromLayer,
      width: fromLayer.width,
      height: fromLayer.height,
      name: "shadowLayer",
      backgroundColor: "black",
      opacity: 0
    });
    shadowLayer.animate({
      properties: {
        opacity: 0.2
      },
      curve: _ANIMATION_CURVE,
      time: _ANIMATION_TIME
    });
    fromLayer.animate({
      properties: {
        x: -this.width * 0.25
      },
      curve: _ANIMATION_CURVE,
      time: _ANIMATION_TIME
    });
    toLayer.shadowColor = "rgba(0,0,0,0.2)";
    toLayer.shadowX = -10;
    toLayer.shadowBlur = 14;
    toLayer.x = this.width + (-toLayer.shadowX);
    return toLayer.animate({
      properties: {
        x: 0
      },
      curve: _ANIMATION_CURVE,
      time: _ANIMATION_TIME
    });
  };

  NavigationComponent.prototype._defaultAnimationPop = function(fromLayer, toLayer) {
    var shadowLayer, shadowLayerAnimation;
    fromLayer.animate({
      properties: {
        x: this.width + (-fromLayer.shadowX)
      },
      curve: _ANIMATION_CURVE,
      time: _ANIMATION_TIME
    });
    toLayer.animate({
      properties: {
        x: 0
      },
      curve: _ANIMATION_CURVE,
      time: _ANIMATION_TIME
    });
    shadowLayer = toLayer.subLayersByName("shadowLayer")[0];
    shadowLayerAnimation = new Animation({
      layer: shadowLayer,
      properties: {
        opacity: 0
      },
      curve: _ANIMATION_CURVE,
      time: _ANIMATION_TIME
    });
    shadowLayerAnimation.start();
    return shadowLayerAnimation.on("end", function() {
      return shadowLayer.destroy();
    });
  };

  return NavigationComponent;

})(Layer);



},{}]},{},[])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvamF2aWVyL1Byb2dyYW1hY2lvbi9naXRodWIvRnJhbWlPUy9uYXZpZ2F0aW9uQ29tcG9uZW50Q29tcGxleC5mcmFtZXIvbW9kdWxlcy9uYXZpZ2F0aW9uQ29tcG9uZW50LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBLElBQUE7NkJBQUE7O0FBQUEsT0FBYSxDQUFDO0FBR2IsTUFBQSw2RUFBQTs7QUFBQSx5Q0FBQSxDQUFBOztBQUFBLEVBQUEsZUFBQSxHQUFrQixHQUFsQixDQUFBOztBQUFBLEVBQ0EsZ0JBQUEsR0FBbUIsNkJBRG5CLENBQUE7O0FBQUEsRUFFQSxhQUFBLEdBQW1CLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLE9BQXpCLENBQWlDLGNBQWpDLENBQUEsS0FBb0QsQ0FBQSxDQUF2RCxHQUErRCxFQUEvRCxHQUF1RSxFQUZ2RixDQUFBOztBQUFBLEVBS0EsMkJBQUEsR0FBOEIsQ0FMOUIsQ0FBQTs7QUFRYSxFQUFBLDZCQUFDLE9BQUQsR0FBQTtBQUdaLFFBQUEsa0VBQUE7QUFBQSxJQUhhLElBQUMsQ0FBQSw0QkFBRCxVQUFTLEVBR3RCLENBQUE7QUFBQSxJQUFBLElBQUcsQ0FBQSxJQUFLLENBQUEsT0FBTyxDQUFDLFNBQWhCO0FBQ0MsWUFBVSxJQUFBLEtBQUEsQ0FBTSwwRUFBTixDQUFWLENBQUE7QUFDQSxZQUFBLENBRkQ7S0FBQTs7VUFJUSxDQUFDLFFBQW1CLE1BQU0sQ0FBQztLQUpuQzs7V0FLUSxDQUFDLFNBQW1CLE1BQU0sQ0FBQztLQUxuQzs7V0FNUSxDQUFDLE9BQW1CO0tBTjVCOztXQU9RLENBQUMsa0JBQW1CO0tBUDVCOztXQVFRLENBQUMsT0FBWSx1QkFBQSxHQUEwQjtLQVIvQztBQUFBLElBVUEscURBQU0sSUFBQyxDQUFBLE9BQVAsQ0FWQSxDQUFBO0FB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Q0FBQSxTQUFVLENBQUMsT0FBWixDQUFaO09BREQ7QUFBQSxNQUVBLEtBQUEsRUFBTyxnQkFGUDtBQUFBLE1BR0EsSUFBQSxFQUFNLGVBSE47S0FERCxDQUFBLENBQUE7QUFBQSxJQUtBLE9BQU8sQ0FBQyxPQUFSLENBQ0M7QUFBQSxNQUFBLFVBQUEsRUFDQztBQUFBLFFBQUEsQ0FBQSxFQUFHLENBQUg7T0FERDtBQUFBLE1BRUEsS0FBQSxFQUFPLGdCQUZQO0FBQUEsTUFHQSxJQUFBLEVBQU0sZUFITjtLQURELENBTEEsQ0FBQTtBQUFBLElBVUEsV0FBQSxHQUFjLE9BQU8sQ0FBQyxlQUFSLENBQXdCLGFBQXhCLENBQXVDLENBQUEsQ0FBQSxDQVZyRCxDQUFBO0FBQUEsSUFXQSxvQkFBQSxHQUEyQixJQUFBLFNBQUEsQ0FDMUI7QUFBQSxNQUFBLEtBQUEsRUFBTyxXQUFQO0FBQUEsTUFDQSxVQUFBLEVBQ0M7QUFBQSxRQUFBLE9BQUEsRUFBUyxDQUFUO09BRkQ7QUFBQSxNQUdBLEtBQUEsRUFBTyxnQkFIUDtBQUFBLE1BSUEsSUFBQSxFQUFNLGVBSk47S0FEMEIsQ0FYM0IsQ0FBQTtBQUFBLElBaUJBLG9CQUFvQixDQUFDLEtBQXJCLENBQUEsQ0FqQkEsQ0FBQTtXQWtCQSxvQkFBb0IsQ0FBQyxFQUFyQixDQUF3QixLQUF4QixFQUErQixTQUFBLEdBQUE7YUFDOUIsV0FBVyxDQUFDLE9BQVosQ0FBQSxFQUQ4QjtJQUFBLENBQS9CLEVBbkJxQjtFQUFBLENBblJ0QixDQUFBOzs2QkFBQTs7R0FIeUMsTUFBMUMsQ0FBQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJjbGFzcyBleHBvcnRzLk5hdmlnYXRpb25Db21wb25lbnQgZXh0ZW5kcyBMYXllclxuXHRcblx0I2lPUyBhbmltYXRpb24gY29uc3RhbnRzXG5cdF9BTklNQVRJT05fVElNRSA9IDAuNFxuXHRfQU5JTUFUSU9OX0NVUlZFID0gXCJjdWJpYy1iZXppZXIoLjYsIC4xLCAuMywgMSlcIlxuXHRfTEVGVF9QQURESU5HID0gaWYgRnJhbWVyLkRldmljZS5kZXZpY2VUeXBlLmluZGV4T2YoXCJpcGhvbmUtNnBsdXNcIikgaXMgLTEgdGhlbiA0NiBlbHNlIDY5XG5cdFxuXHQjIFNoYXJlZCBjbGFzcyB2YXJpYWJsZXNcdFx0XG5cdG5hdmlnYXRpb25Db21wb25lbnRzQ291bnRlciA9IDFcblx0XG5cdCMgUHVibGljIGNvbnN0cnVjdG9yXG5cdGNvbnN0cnVjdG9yOiAoQG9wdGlvbnM9e30pIC0+XG5cblx0XHQjIENoZWNrIHJlcXVpcmVkIHBhcmFtc1xuXHRcdGlmIG5vdCBAb3B0aW9ucy5yb290TGF5ZXJcblx0XHRcdHRocm93IG5ldyBFcnJvcihcIkNhbid0IGluaXRpYWxpemUgTmF2aWdhdGlvbkNvbXBvbmVudDogcGFyYW1ldGVyICdyb290TGF5ZXInIGlzIHJlcXVpcmVkLlwiKVxuXHRcdFx0cmV0dXJuXG5cblx0XHRAb3B0aW9ucy53aWR0aCAgICAgICAgICAgPz0gU2NyZWVuLndpZHRoXG5cdFx0QG9wdGlvbnMuaGVpZ2h0ICAgICAgICAgID89IFNjcmVlbi5oZWlnaHRcblx0XHRAb3B0aW9ucy5jbGlwICAgICAgICAgICAgPz0gdHJ1ZVxuXHRcdEBvcHRpb25zLmJhY2tncm91bmRDb2xvciA/PSBcInRyYW5zcGFyZW50XCJcblx0XHRAb3B0aW9ucy5uYW1lIFx0XHRcdCA/PSBcIk5hdmlnYXRpb24gQ29tcG9uZW50IFwiICsgbmF2aWdhdGlvbkNvbXBvbmVudHNDb3VudGVyXG5cblx0XHRzdXBlciBAb3B0aW9uc1xuXHRcdFxuXHRcdG5hdmlnYXRpb25Db21wb25lbnRzQ291bnRlcisrXG5cblx0XHRAbmF2aWdhdGlvbkxheWVycyAgID0gW11cblx0XHRAaGVhZGVyTGF5ZXIgXHRcdD0gbnVsbFxuXHRcdEBhbmltYXRpb25UaW1lIFx0XHQ9IEBvcHRpb25zLmFuaW1hdGlvblRpbWUgb3IgX0FOSU1BVElPTl9USU1FXG5cdFx0QGFuaW1hdGlvblB1c2ggXHRcdD0gQG9wdGlvbnMuYW5pbWF0aW9uUHVzaCBvciBAX2RlZmF1bHRBbmltYXRpb25QdXNoXG5cdFx0QGFuaW1hdGlvblBvcFx0XHQ9IEBvcHRpb25zLmFuaW1hdGlvblBvcCBvciBAX2RlZmF1bHRBbmltYXRpb25Qb3Bcblx0XHRAY3VycmVudExheWVySW5kZXggXHQ9IC0xXG5cdFx0QGxvY2sgXHRcdFx0XHQ9IGZhbHNlXG5cdFx0QGN1c3RvbUhlYWRlciBcdFx0PSBmYWxzZVxuXHRcdFxuXHRcdGlmIEBvcHRpb25zLmhlYWRlckxheWVyXG5cdFx0XHRAaGVhZGVyTGF5ZXIgPSBAb3B0aW9ucy5oZWFkZXJMYXllclxuXHRcdFx0QGFkZFN1YkxheWVyKEBoZWFkZXJMYXllcilcblx0XHRcdEBjdXN0b21IZWFkZXIgPSB0cnVlXG5cdFx0ZWxzZSAjIERlZmF1bHQgaU9TNyBoZWFkZXJcblx0XHRcdEBoZWFkZXJMYXllciA9IG5ldyBMYXllclxuXHRcdFx0XHRzdXBlckxheWVyOiBAXG5cdFx0XHRcdG5hbWU6IFwiSGVhZGVyIExheWVyXCJcblx0XHRcdFx0d2lkdGg6IEB3aWR0aFxuXHRcdFx0XHRoZWlnaHQ6IDg4XG5cdFx0XHRcdGNsaXA6IGZhbHNlXG5cdFx0XHRcdGJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDI0OCwgMjQ4LCAyNDgsIDAuOSlcIlxuXHRcdFx0QGhlYWRlckxheWVyLnN0eWxlW1wiYmFja2dyb3VuZC1pbWFnZVwiXSA9IFwibGluZWFyLWdyYWRpZW50KDBkZWcsIHJnYigyMDAsIDE5OSwgMjA0KSwgcmdiKDIwMCwgMTk5LCAyMDQpIDUwJSwgdHJhbnNwYXJlbnQgNTAlKVwiXG5cdFx0XHRAaGVhZGVyTGF5ZXIuc3R5bGVbXCJiYWNrZ3JvdW5kLXNpemVcIl0gPSBcIjEwMCUgMXB4XCJcblx0XHRcdEBoZWFkZXJMYXllci5zdHlsZVtcImJhY2tncm91bmQtcmVwZWF0XCJdID0gXCJuby1yZXBlYXRcIlxuXHRcdFx0QGhlYWRlckxheWVyLnN0eWxlW1wiYmFja2dyb3VuZC1wb3NpdGlvblwiXSA9IFwiYm90dG9tXCJcblx0XHRcdFxuXHRcdFx0dGl0bGVMYXllciA9IG5ldyBMYXllclxuXHRcdFx0XHRzdXBlckxheWVyOiBAaGVhZGVyTGF5ZXJcblx0XHRcdFx0bmFtZTogXCJUaXRsZSBMYXllclwiXG5cdFx0XHRcdHdpZHRoOiBAaGVhZGVyTGF5ZXIud2lkdGggLyAyXG5cdFx0XHRcdGhlaWdodDogQGhlYWRlckxheWVyLmhlaWdodFxuXHRcdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IFwiXCJcblx0XHRcdHRpdGxlTGF5ZXIuY2VudGVyWCgpXG5cdFx0XHR0aXRsZUxheWVyLnN0eWxlID1cblx0XHRcdFx0XCJmb250LXNpemVcIiA6IFwiMzRweFwiXG5cdFx0XHRcdFwiY29sb3JcIiA6IFwiYmxhY2tcIlxuXHRcdFx0XHRcImxpbmUtaGVpZ2h0XCIgOiBAaGVhZGVyTGF5ZXIuaGVpZ2h0ICsgXCJweFwiXG5cdFx0XHRcdFwiZm9udC13ZWlnaHRcIiA6IFwiNTAwXCJcblx0XHRcdFx0XCJ0ZXh0LWFsaWduXCIgOiBcImNlbnRlclwiXG5cdFx0XHRcdFwiZm9udC1mYW1pbHlcIjogXCInSGVsdmV0aWNhIE5ldWUnLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmXCJcblx0XHRcdFx0XCJ3aGl0ZS1zcGFjZVwiOiBcIm5vd3JhcFwiXG5cdFx0XHRcdFwiaGVpZ2h0XCIgOiBAaGVhZGVyTGF5ZXIuaGVpZ2h0ICsgXCJweFwiXG5cblx0XHRcdGxlZnRMYXllciA9IG5ldyBMYXllclxuXHRcdFx0XHRzdXBlckxheWVyOiBAaGVhZGVyTGF5ZXJcblx0XHRcdFx0bmFtZTogXCJMZWZ0IExheWVyXCJcblx0XHRcdFx0d2lkdGg6IDE0MFxuXHRcdFx0XHRoZWlnaHQ6IEBoZWFkZXJMYXllci5oZWlnaHRcblx0XHRcdFx0YmFja2dyb3VuZENvbG9yOiBcIlwiXG5cdFx0XHRcdG9wYWNpdHk6IDBcblx0XHRcdFx0eDogX0xFRlRfUEFERElOR1xuXHRcdFx0bGVmdExheWVyLnN0eWxlID1cblx0XHRcdFx0XCJmb250LXNpemVcIiA6IFwiMzRweFwiXG5cdFx0XHRcdFwiY29sb3JcIiA6IFwicmdiKDIxLCAxMjUsIDI1MSlcIlxuXHRcdFx0XHRcImxpbmUtaGVpZ2h0XCIgOiBAaGVhZGVyTGF5ZXIuaGVpZ2h0ICsgXCJweFwiXG5cdFx0XHRcdFwiZm9udC13ZWlnaHRcIiA6IFwiMzAwXCJcblx0XHRcdFx0XCJ0ZXh0LWFsaWduXCIgOiBcImxlZnRcIlxuXHRcdFx0XHRcImZvbnQtZmFtaWx5XCI6IFwiJ0hlbHZldGljYSBOZXVlJywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZlwiXG5cdFx0XHRcdFwid2hpdGUtc3BhY2VcIjogXCJub3dyYXBcIlxuXHRcdFx0XHRcImhlaWdodFwiIDogQGhlYWRlckxheWVyLmhlaWdodCArIFwicHhcIlxuXHRcdFx0bGVmdExheWVyLm9uIEV2ZW50cy5DbGljaywgPT5cblx0XHRcdFx0QHBvcCgpXG5cblx0XHRcdGJhY2tBcnJvdyA9IG5ldyBMYXllclxuXHRcdFx0XHRzdXBlckxheWVyOiBAaGVhZGVyTGF5ZXJcblx0XHRcdFx0bmFtZTogXCJCYWNrIEFycm93XCJcblx0XHRcdFx0b3JpZ2luWDogMFxuXHRcdFx0XHRvcmlnaW5ZOiAwXG5cdFx0XHRcdGJhY2tncm91bmRDb2xvcjogXCJcIlxuXHRcdFx0XHRvcGFjaXR5OiAwXG5cdFx0XHRcdGh0bWw6IFwiPHN2ZyB2ZXJzaW9uPScxLjEnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycgeG1sbnM6eGxpbms9J2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnIHg9JzBweCcgeT0nMHB4JyB3aWR0aD0nNDZweCcgaGVpZ2h0PSc4OHB4JyB2aWV3Qm94PScwIDAgNDYgODgnIGVuYWJsZS1iYWNrZ3JvdW5kPSduZXcgMCAwIDQ2IDg4JyB4bWw6c3BhY2U9J3ByZXNlcnZlJz4gPHBvbHlnb24gZmlsbD0nIzE1N0RGQicgcG9pbnRzPSczNi41MSw2NC41MSA0MC42MSw2MC40IDI0LjIsNDQgNDAuNjEsMjcuNTkgMzYuNTEsMjMuNDkgMjAuMSwzOS45IDE2LDQ0IDIwLjEsNDguMSAyMC4xLDQ4LjEgJy8+IDwvc3ZnPlwiXG5cdFx0XHRiYWNrQXJyb3cub24gRXZlbnRzLkNsaWNrLCA9PlxuXHRcdFx0XHRAcG9wKClcblx0XHRcdFxuXHRcdFx0QGhlYWRlckxheWVyLnRpdGxlTGF5ZXIgPSB0aXRsZUxheWVyXG5cdFx0XHRAaGVhZGVyTGF5ZXIuYmFja0Fycm93ID0gYmFja0Fycm93XG5cdFx0XHRAaGVhZGVyTGF5ZXIubGVmdExheWVyID0gbGVmdExheWVyXG5cdFx0XHRcblx0XHRcdGlmIEZyYW1lci5EZXZpY2UuZGV2aWNlVHlwZS5pbmRleE9mKFwiaXBob25lLTZwbHVzXCIpID49IDBcblx0XHRcdFx0QGhlYWRlckxheWVyLmhlaWdodCA9IDEzMlxuXHRcdFx0XHR0aXRsZUxheWVyLmhlaWdodCA9IDEzMlxuXHRcdFx0XHR0aXRsZUxheWVyLnN0eWxlW1wiZm9udC1zaXplXCJdID0gXCI0OHB4XCJcblx0XHRcdFx0dGl0bGVMYXllci5zdHlsZVtcImxpbmUtaGVpZ2h0XCJdID0gdGl0bGVMYXllci5oZWlnaHQgKyBcInB4XCJcblx0XHRcdFx0bGVmdExheWVyLmhlaWdodCA9IDEzMlxuXHRcdFx0XHRsZWZ0TGF5ZXIuc3R5bGVbXCJmb250LXNpemVcIl0gPSBcIjQ4cHhcIlxuXHRcdFx0XHRsZWZ0TGF5ZXIuc3R5bGVbXCJsaW5lLWhlaWdodFwiXSA9IHRpdGxlTGF5ZXIuaGVpZ2h0ICsgXCJweFwiXG5cdFx0XHRcdGxlZnRMYXllci53aWR0aCA9IGxlZnRMYXllci53aWR0aCAqIDEuNVxuXHRcdFx0XHRiYWNrQXJyb3cuc2NhbGUgPSAxLjVcblx0XHRcdFx0XG5cdFx0aWYgQG9wdGlvbnMucm9vdExheWVyXG5cdFx0XHRAbmF2aWdhdGlvbkxheWVycyA9IFtAb3B0aW9ucy5yb290TGF5ZXJdXG5cdFx0XHRAY3VycmVudExheWVySW5kZXggPSAwXG5cdFx0XHRAYWRkU3ViTGF5ZXIoQG9wdGlvbnMucm9vdExheWVyKVxuXHRcdFx0QGhlYWRlckxheWVyLmJyaW5nVG9Gcm9udCgpXG5cdFx0XHRpZiBAb3B0aW9ucy5yb290TGF5ZXIudGl0bGUgYW5kIEBoZWFkZXJMYXllci50aXRsZUxheWVyXG5cdFx0XHRcdEBoZWFkZXJMYXllci50aXRsZUxheWVyLmh0bWwgPSBcIjxkaXYgc3R5bGU9XFxcIm92ZXJmbG93OiBoaWRkZW47IHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzXFxcIj5cIiArIEBvcHRpb25zLnJvb3RMYXllci50aXRsZSArIFwiPC9kaXY+XCJcblxuXHQjIFB1YmxpYyBtZXRob2RzXG5cdHB1c2g6IChsYXllcikgLT5cblx0XHRpZiBub3QgQGxvY2tcblx0XHRcdEBsb2NrID0gdHJ1ZVxuXHRcdFx0QG5hdmlnYXRpb25MYXllcnMucHVzaChsYXllcilcblx0XHRcdEBhZGRTdWJMYXllcihsYXllcilcblx0XHRcdGlmIEBoZWFkZXJMYXllclxuXHRcdFx0XHRAaGVhZGVyTGF5ZXIuYnJpbmdUb0Zyb250KClcblx0XHRcdGN1cnJlbnRMYXllciA9IEBuYXZpZ2F0aW9uTGF5ZXJzW0BjdXJyZW50TGF5ZXJJbmRleF1cblx0XHRcdG5leHRMYXllciA9IGxheWVyXG5cdFx0XHRpZiB0eXBlb2YgY3VycmVudExheWVyLmxheWVyV2lsbERpc2FwcGVhciBpcyBcImZ1bmN0aW9uXCJcblx0XHRcdFx0Y3VycmVudExheWVyLmxheWVyV2lsbERpc2FwcGVhcigpXG5cdFx0XHRpZiB0eXBlb2YgbmV4dExheWVyLmxheWVyV2lsbEFwcGVhciBpcyBcImZ1bmN0aW9uXCJcblx0XHRcdFx0bmV4dExheWVyLmxheWVyV2lsbEFwcGVhcigpXG5cdFx0XHRAY3VycmVudExheWVySW5kZXgrK1xuXHRcdFx0QGFuaW1hdGlvblB1c2goY3VycmVudExheWVyLCBuZXh0TGF5ZXIpXG5cdFx0XHRAX2RlZmF1bHRIZWFkZXJBbmltYXRpb25QdXNoKGN1cnJlbnRMYXllciwgbmV4dExheWVyKVxuXHRcdFx0VXRpbHMuZGVsYXkgQGFuaW1hdGlvblRpbWUsID0+XG5cdFx0XHRcdGN1cnJlbnRMYXllci52aXNpYmxlID0gZmFsc2Vcblx0XHRcdFx0QGxvY2sgPSBmYWxzZVxuXHRcdGVsc2Vcblx0XHRcdCMgSWYgdGhlcmUgd2FzIGEgdHJhbnNpdGlvbmluZyBnb2luZyBvbiwganVzdCByZW1vdmUgdGhlIG5ldyBsYXllclxuXHRcdFx0bGF5ZXIuZGVzdHJveSgpXG5cdFx0XG5cdHBvcDogLT5cblx0XHRAcG9wVG9MYXllckF0SW5kZXgoQGN1cnJlbnRMYXllckluZGV4IC0gMSlcblxuXHRwb3BUb1Jvb3RMYXllcjogLT5cblx0XHRAcG9wVG9MYXllckF0SW5kZXgoMClcblxuXHRwb3BUb0xheWVyQXRJbmRleDogKGluZGV4KSAtPlxuXHRcdGlmIG5vdCBAbG9ja1xuXHRcdFx0QGxvY2sgPSB0cnVlXG5cdFx0XHRpZiBAY3VycmVudExheWVySW5kZXggPiAwIGFuZCAoMCA8PSBpbmRleCA8PSBAbmF2aWdhdGlvbkxheWVycy5sZW5ndGgpXG5cdFx0XHRcdGN1cnJlbnRMYXllciA9IEBuYXZpZ2F0aW9uTGF5ZXJzW0BjdXJyZW50TGF5ZXJJbmRleF1cblx0XHRcdFx0bmV4dExheWVyID0gQG5hdmlnYXRpb25MYXllcnNbaW5kZXhdXG5cdFx0XHRcdG5leHRMYXllci52aXNpYmxlID0gdHJ1ZVxuXHRcdFx0XHRpZiB0eXBlb2YgY3VycmVudExheWVyLmxheWVyV2lsbERpc2FwcGVhciBpcyBcImZ1bmN0aW9uXCJcblx0XHRcdFx0XHRjdXJyZW50TGF5ZXIubGF5ZXJXaWxsRGlzYXBwZWFyKClcblx0XHRcdFx0aWYgdHlwZW9mIG5leHRMYXllci5sYXllcldpbGxBcHBlYXIgaXMgXCJmdW5jdGlvblwiXG5cdFx0XHRcdFx0bmV4dExheWVyLmxheWVyV2lsbEFwcGVhcigpXG5cdFx0XHRcdEBhbmltYXRpb25Qb3AoY3VycmVudExheWVyLCBuZXh0TGF5ZXIpXG5cdFx0XHRcdEBfZGVmYXVsdEhlYWRlckFuaW1hdGlvblBvcChjdXJyZW50TGF5ZXIsIG5leHRMYXllciwgaW5kZXgpXG5cdFx0XHRcdFV0aWxzLmRlbGF5IEBhbmltYXRpb25UaW1lLCA9PlxuXHRcdFx0XHRcdGZvciBpbmRleFRvQmVEZWxldGVkIGluIFtAbmF2aWdhdGlvbkxheWVycy5sZW5ndGgtMS4uaW5kZXgrMV1cblx0XHRcdFx0XHRcdGxheWVyVG9CZURlbGV0ZWQgPSBAbmF2aWdhdGlvbkxheWVyc1tpbmRleFRvQmVEZWxldGVkXVxuXHRcdFx0XHRcdFx0bGF5ZXJUb0JlRGVsZXRlZC5kZXN0cm95KClcblx0XHRcdFx0XHRcdEBuYXZpZ2F0aW9uTGF5ZXJzLnBvcCgpXG5cdFx0XHRcdFx0QGN1cnJlbnRMYXllckluZGV4ID0gaW5kZXhcblx0XHRcdFx0XHRAbG9jayA9IGZhbHNlXG5cdFx0XHRlbHNlXG5cdFx0XHRcdEBsb2NrID0gZmFsc2VcblxuXHQjIFByaXZhdGUgbWV0aG9kc1xuXG5cdF9hbmltYXRlSGVhZGVyU3ViTGF5ZXI6IChzdWJMYXllck5hbWUsIGZyb21MYXllciwgdG9MYXllciwgbmV3VGl0bGUsIGN1cnJlbnRUb1gsIG5ld0Zyb21YKSAtPlxuXHRcdGlmIEBoZWFkZXJMYXllcltzdWJMYXllck5hbWVdXG5cdFx0XHRoZWFkZXJTdWJMYXllciA9IEBoZWFkZXJMYXllcltzdWJMYXllck5hbWVdXG5cdFx0XHRvcmlnU3ViTGF5ZXJYID0gaGVhZGVyU3ViTGF5ZXIueFxuXHRcdFx0XHRcblx0XHRcdCMgQW5pbWF0ZSBjdXJyZW50IHN1YmxheWVyXG5cdFx0XHRoZWFkZXJTdWJMYXllci5hbmltYXRlXG5cdFx0XHRcdHByb3BlcnRpZXM6XG5cdFx0XHRcdFx0b3BhY2l0eTogMFxuXHRcdFx0XHRcdHg6IGN1cnJlbnRUb1hcblx0XHRcdFx0Y3VydmU6IF9BTklNQVRJT05fQ1VSVkVcblx0XHRcdFx0dGltZTogX0FOSU1BVElPTl9USU1FXG5cdFx0XHRcblx0XHRcdCNDcmVhdGUgbmV3IGxheWVyIHRvIGFuaW1hdGVcblx0XHRcdGlmIG5ld1RpdGxlIGlzbnQgdW5kZWZpbmVkXG5cdFx0XHRcdG5ld0hlYWRlclN1YkxheWVyID0gaGVhZGVyU3ViTGF5ZXIuY29weSgpXG5cdFx0XHRcdG5ld0hlYWRlclN1YkxheWVyLnN0eWxlID0gaGVhZGVyU3ViTGF5ZXIuc3R5bGVcblx0XHRcdFx0QGhlYWRlckxheWVyLmFkZFN1YkxheWVyKG5ld0hlYWRlclN1YkxheWVyKVxuXHRcdFx0XHRuZXdIZWFkZXJTdWJMYXllci5uYW1lID0gXCJ0bXAgXCIgKyBzdWJMYXllck5hbWVcblx0XHRcdFx0bmV3SGVhZGVyU3ViTGF5ZXIueCA9IG5ld0Zyb21YXG5cdFx0XHRcdG5ld0hlYWRlclN1YkxheWVyLm9wYWNpdHkgPSAwXG5cdFx0XHRcdG5ld0hlYWRlclN1YkxheWVyLmh0bWwgPSBcIjxkaXYgc3R5bGU9XFxcIm92ZXJmbG93OiBoaWRkZW47IHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzXFxcIj5cIiArIG5ld1RpdGxlICsgXCI8L2Rpdj5cIlxuXHRcdFx0XHRuZXdIZWFkZXJTdWJMYXllckFuaW1hdGlvbiA9IG5ldyBBbmltYXRpb25cblx0XHRcdFx0XHRsYXllcjogbmV3SGVhZGVyU3ViTGF5ZXJcblx0XHRcdFx0XHRwcm9wZXJ0aWVzOlxuXHRcdFx0XHRcdFx0b3BhY2l0eTogMVxuXHRcdFx0XHRcdFx0eDogb3JpZ1N1YkxheWVyWFxuXHRcdFx0XHRcdGN1cnZlOiBfQU5JTUFUSU9OX0NVUlZFXG5cdFx0XHRcdFx0dGltZTogX0FOSU1BVElPTl9USU1FXG5cdFx0XHRcdG5ld0hlYWRlclN1YkxheWVyQW5pbWF0aW9uLnN0YXJ0KClcblx0XHRcdFx0bmV3SGVhZGVyU3ViTGF5ZXJBbmltYXRpb24ub24gXCJlbmRcIiwgLT5cblx0XHRcdFx0XHRoZWFkZXJTdWJMYXllci5odG1sID0gbmV3SGVhZGVyU3ViTGF5ZXIuaHRtbFxuXHRcdFx0XHRcdGhlYWRlclN1YkxheWVyLm9wYWNpdHkgPSAxXG5cdFx0XHRcdFx0aGVhZGVyU3ViTGF5ZXIueCA9IG9yaWdTdWJMYXllclhcblx0XHRcdFx0XHRuZXdIZWFkZXJTdWJMYXllci5kZXN0cm95KClcblxuXHRfZGVmYXVsdEhlYWRlckFuaW1hdGlvblB1c2g6IChmcm9tTGF5ZXIsIHRvTGF5ZXIpLT5cblx0XHRpZiBAaGVhZGVyTGF5ZXIgYW5kIG5vdCBAY3VzdG9tSGVhZGVyXG5cdFx0XHRcblx0XHRcdEBfYW5pbWF0ZUhlYWRlclN1YkxheWVyKFwidGl0bGVMYXllclwiLCBmcm9tTGF5ZXIsIHRvTGF5ZXIsIHRvTGF5ZXIudGl0bGUsIC1fTEVGVF9QQURESU5HLCBAaGVhZGVyTGF5ZXIud2lkdGgpXG5cblx0XHRcdEBfYW5pbWF0ZUhlYWRlclN1YkxheWVyKFwibGVmdExheWVyXCIsIGZyb21MYXllciwgdG9MYXllciwgZnJvbUxheWVyLnRpdGxlLCAtIEBoZWFkZXJMYXllci53aWR0aCAvIDIsIEBoZWFkZXJMYXllci53aWR0aCAvIDIpXG5cblx0XHRcdGlmIEBoZWFkZXJMYXllci5iYWNrQXJyb3dcblx0XHRcdFx0QGhlYWRlckxheWVyLmJhY2tBcnJvdy5hbmltYXRlXG5cdFx0XHRcdFx0cHJvcGVydGllczpcblx0XHRcdFx0XHRcdG9wYWNpdHk6IDFcblx0XHRcdFx0XHRjdXJ2ZTogX0FOSU1BVElPTl9DVVJWRVxuXHRcdFx0XHRcdHRpbWU6IF9BTklNQVRJT05fVElNRVxuXG5cdF9kZWZhdWx0SGVhZGVyQW5pbWF0aW9uUG9wOiAoZnJvbUxheWVyLCB0b0xheWVyLCBpbmRleCktPlxuXHRcdCNBbmltYXRlIGhlYWRlclxuXHRcdGlmIEBoZWFkZXJMYXllciBhbmQgbm90IEBjdXN0b21IZWFkZXJcblxuXHRcdFx0QF9hbmltYXRlSGVhZGVyU3ViTGF5ZXIoXCJ0aXRsZUxheWVyXCIsIGZyb21MYXllciwgdG9MYXllciwgdG9MYXllci50aXRsZSwgQGhlYWRlckxheWVyLndpZHRoLCAwKVxuXHRcdFx0XG5cdFx0XHRuZXdMZWZ0TGF5ZXJUaXRsZSA9IFwiXCJcblx0XHRcdGlmIEBuYXZpZ2F0aW9uTGF5ZXJzW2luZGV4IC0gMV0gYW5kIEBuYXZpZ2F0aW9uTGF5ZXJzW2luZGV4IC0gMV0udGl0bGVcblx0XHRcdFx0bmV3TGVmdExheWVyVGl0bGUgPSBAbmF2aWdhdGlvbkxheWVyc1tpbmRleCAtIDFdLnRpdGxlXG5cdFx0XHRlbHNlIFxuXHRcdFx0XHRpZiBAaGVhZGVyTGF5ZXIuYmFja0Fycm93XG5cdFx0XHRcdFx0QGhlYWRlckxheWVyLmJhY2tBcnJvdy5hbmltYXRlXG5cdFx0XHRcdFx0XHRwcm9wZXJ0aWVzOlxuXHRcdFx0XHRcdFx0XHRvcGFjaXR5OiAwXG5cdFx0XHRcdFx0XHRjdXJ2ZTogX0FOSU1BVElPTl9DVVJWRVxuXHRcdFx0XHRcdFx0dGltZTogX0FOSU1BVElPTl9USU1FXG5cdFx0XHRAX2FuaW1hdGVIZWFkZXJTdWJMYXllcihcImxlZnRMYXllclwiLCBmcm9tTGF5ZXIsIHRvTGF5ZXIsIG5ld0xlZnRMYXllclRpdGxlLCBAaGVhZGVyTGF5ZXIud2lkdGggLyAyLCAtQGhlYWRlckxheWVyLndpZHRoIC8gMilcblx0XHRcdFxuXG5cdF9kZWZhdWx0QW5pbWF0aW9uUHVzaDogKGZyb21MYXllciwgdG9MYXllcikgLT5cblx0XHRzaGFkb3dMYXllciA9IG5ldyBMYXllclxuXHRcdFx0c3VwZXJMYXllcjogZnJvbUxheWVyXG5cdFx0XHR3aWR0aDogZnJvbUxheWVyLndpZHRoXG5cdFx0XHRoZWlnaHQ6IGZyb21MYXllci5oZWlnaHRcblx0XHRcdG5hbWU6IFwic2hhZG93TGF5ZXJcIlxuXHRcdFx0YmFja2dyb3VuZENvbG9yOiBcImJsYWNrXCJcblx0XHRcdG9wYWNpdHk6IDBcblx0XHRzaGFkb3dMYXllci5hbmltYXRlXG5cdFx0XHRwcm9wZXJ0aWVzOlxuXHRcdFx0XHRvcGFjaXR5OiAwLjJcblx0XHRcdGN1cnZlOiBfQU5JTUFUSU9OX0NVUlZFXG5cdFx0XHR0aW1lOiBfQU5JTUFUSU9OX1RJTUVcblx0XHRmcm9tTGF5ZXIuYW5pbWF0ZVxuXHRcdFx0cHJvcGVydGllczpcblx0XHRcdFx0eDogLUB3aWR0aCAqIDAuMjVcblx0XHRcdGN1cnZlOiBfQU5JTUFUSU9OX0NVUlZFXG5cdFx0XHR0aW1lOiBfQU5JTUFUSU9OX1RJTUVcblx0XHR0b0xheWVyLnNoYWRvd0NvbG9yID0gXCJyZ2JhKDAsMCwwLDAuMilcIlxuXHRcdHRvTGF5ZXIuc2hhZG93WCA9IC0xMFxuXHRcdHRvTGF5ZXIuc2hhZG93Qmx1ciA9IDE0XG5cdFx0dG9MYXllci54ID0gQHdpZHRoICsgKC10b0xheWVyLnNoYWRvd1gpXG5cdFx0dG9MYXllci5hbmltYXRlXG5cdFx0XHRwcm9wZXJ0aWVzOlxuXHRcdFx0XHR4OiAwXG5cdFx0XHRjdXJ2ZTogX0FOSU1BVElPTl9DVVJWRVxuXHRcdFx0dGltZTogX0FOSU1BVElPTl9USU1FXG5cblx0XHRcdFxuXHRfZGVmYXVsdEFuaW1hdGlvblBvcDogKGZyb21MYXllciwgdG9MYXllcikgLT5cblx0XHRmcm9tTGF5ZXIuYW5pbWF0ZVxuXHRcdFx0cHJvcGVydGllczpcblx0XHRcdFx0eDogQHdpZHRoICsgKC1mcm9tTGF5ZXIuc2hhZG93WClcblx0XHRcdGN1cnZlOiBfQU5JTUFUSU9OX0NVUlZFXG5cdFx0XHR0aW1lOiBfQU5JTUFUSU9OX1RJTUVcblx0XHR0b0xheWVyLmFuaW1hdGVcblx0XHRcdHByb3BlcnRpZXM6XG5cdFx0XHRcdHg6IDBcblx0XHRcdGN1cnZlOiBfQU5JTUFUSU9OX0NVUlZFXG5cdFx0XHR0aW1lOiBfQU5JTUFUSU9OX1RJTUVcblx0XHRzaGFkb3dMYXllciA9IHRvTGF5ZXIuc3ViTGF5ZXJzQnlOYW1lKFwic2hhZG93TGF5ZXJcIilbMF1cblx0XHRzaGFkb3dMYXllckFuaW1hdGlvbiA9IG5ldyBBbmltYXRpb25cblx0XHRcdGxheWVyOiBzaGFkb3dMYXllclxuXHRcdFx0cHJvcGVydGllczpcblx0XHRcdFx0b3BhY2l0eTogMFxuXHRcdFx0Y3VydmU6IF9BTklNQVRJT05fQ1VSVkVcblx0XHRcdHRpbWU6IF9BTklNQVRJT05fVElNRVxuXHRcdHNoYWRvd0xheWVyQW5pbWF0aW9uLnN0YXJ0KClcblx0XHRzaGFkb3dMYXllckFuaW1hdGlvbi5vbiBcImVuZFwiLCAtPlxuXHRcdFx0c2hhZG93TGF5ZXIuZGVzdHJveSgpXG5cdFx0XG4iXX0=
