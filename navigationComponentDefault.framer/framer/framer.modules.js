require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"navigationComponent":[function(require,module,exports){
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

exports.NavigationComponent = (function(superClass) {
  var _ANIMATION_CURVE, _ANIMATION_TIME, navigationComponentsCounter;

  extend(NavigationComponent, superClass);

  _ANIMATION_TIME = 0.4;

  _ANIMATION_CURVE = "cubic-bezier(.6, .1, .3, 1)";

  navigationComponentsCounter = 1;

  function NavigationComponent(options) {
    var backArrow, base, base1, base2, base3, base4, leftLayer, titleLayer;
    this.options = options != null ? options : {};
    if (!this.options.initialLayer) {
      throw new Error("Can't initialize NavigationComponent: parameter 'initialLayer' is required.");
      return;
    }
    if ((base = this.options).width == null) {
      base.width = Screen.width;
    }
    if ((base1 = this.options).height == null) {
      base1.height = Screen.height;
    }
    if ((base2 = this.options).clip == null) {
      base2.clip = true;
    }
    if ((base3 = this.options).backgroundColor == null) {
      base3.backgroundColor = "transparent";
    }
    if ((base4 = this.options).name == null) {
      base4.name = "Navigation Component " + navigationComponentsCounter;
    }
    NavigationComponent.__super__.constructor.call(this, this.options);
    navigationComponentsCounter++;
    this.navigationLayers = [];
    this.headerLayer = null;
    this.animationTime = this.options.animationTime || _ANIMATION_TIME;
    this.animationPush = this.options.animationPush || this._defaultAnimationPush;
    this.animationPop = this.options.animationPop || this._defaultAnimationPop;
    this.currentLayerIndex = -1;
    this.lock = false;
    if (this.options.headerLayer) {
      this.headerLayer = this.options.headerLayer;
      this.addSubLayer(this.headerLayer);
    } else {
      this.headerLayer = new Layer({
        superLayer: this,
        name: "Header Layer",
        width: this.width,
        height: 88,
        clip: false,
        backgroundColor: "rgba(248, 248, 248, 0.9)"
      });
      this.headerLayer.style["background-image"] = "linear-gradient(0deg, rgb(200, 199, 204), rgb(200, 199, 204) 50%, transparent 50%)";
      this.headerLayer.style["background-size"] = "100% 1px";
      this.headerLayer.style["background-repeat"] = "no-repeat";
      this.headerLayer.style["background-position"] = "bottom";
      titleLayer = new Layer({
        superLayer: this.headerLayer,
        name: "Title Layer",
        width: this.headerLayer.width / 2,
        height: this.headerLayer.height,
        backgroundColor: ""
      });
      titleLayer.centerX();
      titleLayer.style = {
        "font-size": "34px",
        "color": "black",
        "line-height": this.headerLayer.height + "px",
        "font-weight": "500",
        "text-align": "center",
        "font-family": "'Helvetica Neue', Helvetica, Arial, sans-serif",
        "white-space": "nowrap",
        "height": this.headerLayer.height + "px"
      };
      leftLayer = new Layer({
        superLayer: this.headerLayer,
        name: "Left Layer",
        width: 140,
        height: this.headerLayer.height,
        backgroundColor: "",
        opacity: 0
      });
      leftLayer.style = {
        "font-size": "34px",
        "color": "rgb(21, 125, 251)",
        "line-height": this.headerLayer.height + "px",
        "font-weight": "300",
        "text-align": "left",
        "font-family": "'Helvetica Neue', Helvetica, Arial, sans-serif",
        "white-space": "nowrap",
        "height": this.headerLayer.height + "px"
      };
      leftLayer.on(Events.Click, (function(_this) {
        return function() {
          return _this.pop();
        };
      })(this));
      backArrow = new Layer({
        superLayer: this.headerLayer,
        name: "Back Arrow",
        originX: 0,
        originY: 0,
        backgroundColor: "",
        opacity: 0,
        html: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' width='46px' height='88px' viewBox='0 0 46 88' enable-background='new 0 0 46 88' xml:space='preserve'> <polygon fill='#157DFB' points='36.51,64.51 40.61,60.4 24.2,44 40.61,27.59 36.51,23.49 20.1,39.9 16,44 20.1,48.1 20.1,48.1 '/> </svg>"
      });
      backArrow.on(Events.Click, (function(_this) {
        return function() {
          return _this.pop();
        };
      })(this));
      this.headerLayer.titleLayer = titleLayer;
      this.headerLayer.backArrow = backArrow;
      this.headerLayer.leftLayer = leftLayer;
      if (Framer.Device.deviceType.indexOf("iphone-6plus") >= 0) {
        this.headerLayer.height = 132;
        titleLayer.height = 132;
        titleLayer.style["font-size"] = "48px";
        titleLayer.style["line-height"] = titleLayer.height + "px";
        leftLayer.height = 132;
        leftLayer.style["font-size"] = "48px";
        leftLayer.style["line-height"] = titleLayer.height + "px";
        leftLayer.width = leftLayer.width * 1.5;
        backArrow.scale = 1.5;
      }
    }
    if (this.options.initialLayer) {
      this.navigationLayers = [this.options.initialLayer];
      this.currentLayerIndex = 0;
      this.addSubLayer(this.options.initialLayer);
      this.headerLayer.bringToFront();
      if (this.options.initialLayer.title) {
        this.headerLayer.titleLayer.html = "<div style=\"overflow: hidden; text-overflow: ellipsis\">" + this.options.initialLayer.title + "</div>";
      }
    }
  }

  NavigationComponent.prototype.push = function(layer) {
    var currentLayer, nextLayer;
    if (!this.lock) {
      this.lock = true;
      this.navigationLayers.push(layer);
      this.addSubLayer(layer);
      if (this.headerLayer) {
        this.headerLayer.bringToFront();
      }
      currentLayer = this.navigationLayers[this.currentLayerIndex];
      nextLayer = layer;
      if (typeof currentLayer.layerWillDisappear === "function") {
        currentLayer.layerWillDisappear();
      }
      if (typeof nextLayer.layerWillAppear === "function") {
        nextLayer.layerWillAppear();
      }
      this.currentLayerIndex++;
      this.animationPush(currentLayer, nextLayer);
      return Utils.delay(this.animationTime, (function(_this) {
        return function() {
          return _this.lock = false;
        };
      })(this));
    } else {
      return layer.destroy();
    }
  };

  NavigationComponent.prototype.pop = function() {
    var currentLayer, nextLayer;
    if (!this.lock) {
      this.lock = true;
      if (this.currentLayerIndex > 0) {
        currentLayer = this.navigationLayers[this.currentLayerIndex];
        nextLayer = this.navigationLayers[this.currentLayerIndex - 1];
        if (typeof currentLayer.layerWillDisappear === "function") {
          currentLayer.layerWillDisappear();
        }
        if (typeof nextLayer.layerWillAppear === "function") {
          nextLayer.layerWillAppear();
        }
        this.animationPop(currentLayer, nextLayer);
        return Utils.delay(this.animationTime, (function(_this) {
          return function() {
            _this.navigationLayers.pop(currentLayer);
            _this.currentLayerIndex--;
            currentLayer.destroy();
            return _this.lock = false;
          };
        })(this));
      } else {
        return this.lock = false;
      }
    }
  };

  NavigationComponent.prototype._defaultAnimationPush = function(fromLayer, toLayer) {
    var leftLayer, leftPadding, newLeftLayer, newLeftLayerAnimation, newTitleAnimation, newTitleLayer, shadowLayer, titleLayer;
    shadowLayer = new Layer({
      superLayer: fromLayer,
      width: fromLayer.width,
      height: fromLayer.height,
      name: "shadowLayer",
      backgroundColor: "black",
      opacity: 0
    });
    shadowLayer.animate({
      properties: {
        opacity: 0.2
      },
      curve: _ANIMATION_CURVE,
      time: _ANIMATION_TIME
    });
    fromLayer.animate({
      properties: {
        x: -this.width * 0.25
      },
      curve: _ANIMATION_CURVE,
      time: _ANIMATION_TIME
    });
    toLayer.shadowColor = "rgba(0,0,0,0.2)";
    toLayer.shadowX = -10;
    toLayer.shadowBlur = 14;
    toLayer.x = this.width + (-toLayer.shadowX);
    toLayer.animate({
      properties: {
        x: 0
      },
      curve: _ANIMATION_CURVE,
      time: _ANIMATION_TIME
    });
    if (this.headerLayer) {
      leftPadding = 46;
      if (Framer.Device.deviceType.indexOf("iphone-6plus") >= 0) {
        leftPadding = leftPadding * 1.5;
      }
      if (this.headerLayer.titleLayer) {
        titleLayer = this.headerLayer.titleLayer;
        titleLayer.animate({
          properties: {
            opacity: 0,
            x: -leftPadding
          },
          curve: _ANIMATION_CURVE,
          time: _ANIMATION_TIME
        });
        newTitleLayer = titleLayer.copy();
        newTitleLayer.style = titleLayer.style;
        this.headerLayer.addSubLayer(newTitleLayer);
        newTitleLayer.name = "Tmp Title";
        newTitleLayer.x = this.headerLayer.width;
        newTitleLayer.html = "<div style=\"overflow: hidden; text-overflow: ellipsis\">" + toLayer.title + "</div>";
        newTitleAnimation = new Animation({
          layer: newTitleLayer,
          properties: {
            opacity: 1,
            x: titleLayer.x
          },
          curve: _ANIMATION_CURVE,
          time: _ANIMATION_TIME
        });
        newTitleAnimation.start();
        newTitleAnimation.on("end", function() {
          titleLayer.html = newTitleLayer.html;
          titleLayer.opacity = 1;
          titleLayer.centerX();
          return newTitleLayer.destroy();
        });
      }
      if (this.headerLayer.backArrow) {
        this.headerLayer.backArrow.animate({
          properties: {
            opacity: 1
          },
          curve: _ANIMATION_CURVE,
          time: _ANIMATION_TIME
        });
      }
      if (this.headerLayer.leftLayer) {
        leftLayer = this.headerLayer.leftLayer;
        leftLayer.animate({
          properties: {
            opacity: 0,
            x: -this.headerLayer.width / 2
          },
          curve: _ANIMATION_CURVE,
          time: _ANIMATION_TIME
        });
        newLeftLayer = leftLayer.copy();
        newLeftLayer.style = leftLayer.style;
        this.headerLayer.addSubLayer(newLeftLayer);
        newLeftLayer.name = "Tmp Left Layer";
        newLeftLayer.centerX();
        newLeftLayer.opacity = 0;
        newLeftLayer.html = "<div style=\"overflow: hidden; text-overflow: ellipsis\">" + fromLayer.title + "</div>";
        newLeftLayerAnimation = new Animation({
          layer: newLeftLayer,
          properties: {
            opacity: 1,
            x: leftPadding
          },
          curve: _ANIMATION_CURVE,
          time: _ANIMATION_TIME
        });
        newLeftLayerAnimation.start();
        return newLeftLayerAnimation.on("end", function() {
          leftLayer.html = newLeftLayer.html;
          leftLayer.x = leftPadding;
          leftLayer.opacity = 1;
          return newLeftLayer.destroy();
        });
      }
    }
  };

  NavigationComponent.prototype._defaultAnimationPop = function(fromLayer, toLayer) {
    var leftLayer, newLeftLayer, newLeftLayerAnimation, newTitleAnimation, newTitleLayer, origLeftLayerX, shadowLayer, shadowLayerAnimation, titleLayer;
    fromLayer.animate({
      properties: {
        x: this.width + (-fromLayer.shadowX)
      },
      curve: _ANIMATION_CURVE,
      time: _ANIMATION_TIME
    });
    toLayer.animate({
      properties: {
        x: 0
      },
      curve: _ANIMATION_CURVE,
      time: _ANIMATION_TIME
    });
    shadowLayer = toLayer.subLayersByName("shadowLayer")[0];
    shadowLayerAnimation = new Animation({
      layer: shadowLayer,
      properties: {
        opacity: 0
      },
      curve: _ANIMATION_CURVE,
      time: _ANIMATION_TIME
    });
    shadowLayerAnimation.start();
    shadowLayerAnimation.on("end", function() {
      return shadowLayer.destroy();
    });
    if (this.headerLayer) {
      if (this.headerLayer.titleLayer) {
        titleLayer = this.headerLayer.titleLayer;
        titleLayer.animate({
          properties: {
            opacity: 0,
            x: this.headerLayer.width
          },
          curve: _ANIMATION_CURVE,
          time: _ANIMATION_TIME
        });
        newTitleLayer = titleLayer.copy();
        newTitleLayer.style = titleLayer.style;
        this.headerLayer.addSubLayer(newTitleLayer);
        newTitleLayer.name = "Tmp Title";
        newTitleLayer.x = 0;
        newTitleLayer.opacity = 0;
        newTitleLayer.html = "<div style=\"overflow: hidden; text-overflow: ellipsis\">" + toLayer.title + "</div>";
        newTitleAnimation = new Animation({
          layer: newTitleLayer,
          properties: {
            opacity: 1,
            x: titleLayer.x
          },
          curve: _ANIMATION_CURVE,
          time: _ANIMATION_TIME
        });
        newTitleAnimation.start();
        newTitleAnimation.on("end", function() {
          titleLayer.html = newTitleLayer.html;
          titleLayer.opacity = 1;
          titleLayer.centerX();
          return newTitleLayer.destroy();
        });
      }
      if (this.headerLayer.leftLayer) {
        leftLayer = this.headerLayer.leftLayer;
        origLeftLayerX = leftLayer.x;
        leftLayer.animate({
          properties: {
            opacity: 0,
            x: this.headerLayer.width / 2
          },
          curve: _ANIMATION_CURVE,
          time: _ANIMATION_TIME
        });
        if (this.navigationLayers.length > 2 && this.navigationLayers[this.currentLayerIndex - 2] && this.navigationLayers[this.currentLayerIndex - 2].title) {
          newLeftLayer = leftLayer.copy();
          newLeftLayer.style = leftLayer.style;
          this.headerLayer.addSubLayer(newLeftLayer);
          newLeftLayer.name = "Tmp Left Layer";
          newLeftLayer.x = -newLeftLayer.width;
          newLeftLayer.opacity = 0;
          newLeftLayer.html = "<div style=\"overflow: hidden; text-overflow: ellipsis\">" + this.navigationLayers[this.currentLayerIndex - 2].title + "</div>";
          newLeftLayerAnimation = new Animation({
            layer: newLeftLayer,
            properties: {
              opacity: 1,
              x: leftLayer.x
            },
            curve: _ANIMATION_CURVE,
            time: _ANIMATION_TIME
          });
          newLeftLayerAnimation.start();
          newLeftLayerAnimation.on("end", function() {
            leftLayer.html = newLeftLayer.html;
            leftLayer.x = origLeftLayerX;
            leftLayer.opacity = 1;
            return newLeftLayer.destroy();
          });
        }
      }
    }
    if (this.navigationLayers.length === 2) {
      if (this.headerLayer.backArrow) {
        return this.headerLayer.backArrow.animate({
          properties: {
            opacity: 0
          },
          curve: _ANIMATION_CURVE,
          time: _ANIMATION_TIME
        });
      }
    }
  };

  return NavigationComponent;

})(Layer);



},{}]},{},[])
//# sourceMappingURL=data:application/json;base64,
