require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"navigationComponent":[function(require,module,exports){
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

exports.NavigationComponent = (function(superClass) {
  var _ANIMATION_CURVE, _ANIMATION_TIME, navigationComponentsCounter;

  extend(NavigationComponent, superClass);

  _ANIMATION_TIME = 0.4;

  _ANIMATION_CURVE = "cubic-bezier(.6, .1, .3, 1)";

  navigationComponentsCounter = 1;

  function NavigationComponent(options) {
    var base, base1, base2, base3, base4;
    this.options = options != null ? options : {};
    if (!this.options.initialLayer) {
      throw new Error("Can't initialize NavigationComponent: parameter 'initialLayer' is required.");
      return;
    }
    if ((base = this.options).width == null) {
      base.width = Screen.width;
    }
    if ((base1 = this.options).height == null) {
      base1.height = Screen.height;
    }
    if ((base2 = this.options).clip == null) {
      base2.clip = true;
    }
    if ((base3 = this.options).backgroundColor == null) {
      base3.backgroundColor = "transparent";
    }
    if ((base4 = this.options).name == null) {
      base4.name = "NavigationComponent " + navigationComponentsCounter;
    }
    NavigationComponent.__super__.constructor.call(this, this.options);
    navigationComponentsCounter++;
    this.navigationLayers = [];
    this.animationTime = this.options.animationTime || _ANIMATION_TIME;
    this.animationPush = this.options.animationPush || this._defaultAnimationPush;
    this.animationPop = this.options.animationPop || this._defaultAnimationPop;
    this.currentLayerIndex = -1;
    this.lock = false;
    if (this.options.headerLayer) {
      this.headerLayer = this.options.headerLayer;
      this.addSubLayer(this.headerLayer);
    } else {
      this.headerLayer = new Layer({
        width: this.width,
        height: 88,
        backgroundColor: "rgba(248, 248, 248, 0.9)"
      });
      if (Framer.Device.deviceType.indexOf("iphone-6plus") >= 0) {
        this.headerLayer.height = 132;
      }
      this.headerLayer.style = {
        "font-size": this.headerLayer.height / 2.5 + "px",
        "color": "black",
        "line-height": this.headerLayer.height + "px",
        "font-weight": "500",
        "text-align": "center",
        "font-family": "'Helvetica Neue', Helvetica, Arial, sans-serif"
      };
    }
    if (this.options.initialLayer) {
      this.navigationLayers = [this.options.initialLayer];
      this.currentLayerIndex = 0;
      this.addSubLayer(this.options.initialLayer);
      if (this.options.initialLayer.title) {
        this.headerLayer.html = this.options.initialLayer.title;
      }
    }
  }

  NavigationComponent.prototype.push = function(layer) {
    var currentLayer, nextLayer;
    if (!this.lock) {
      this.lock = true;
      this.navigationLayers.push(layer);
      this.addSubLayer(layer);
      currentLayer = this.navigationLayers[this.currentLayerIndex];
      nextLayer = layer;
      if (typeof currentLayer.layerWillDisappear === "function") {
        currentLayer.layerWillDisappear();
      }
      if (typeof nextLayer.layerWillAppear === "function") {
        nextLayer.layerWillAppear();
      }
      this.currentLayerIndex++;
      this.animationPush(currentLayer, nextLayer);
      return Utils.delay(this.animationTime, (function(_this) {
        return function() {
          return _this.lock = false;
        };
      })(this));
    } else {
      return layer.destroy();
    }
  };

  NavigationComponent.prototype.pop = function() {
    var currentLayer, nextLayer;
    if (!this.lock) {
      this.lock = true;
      if (this.currentLayerIndex > 0) {
        currentLayer = this.navigationLayers[this.currentLayerIndex];
        nextLayer = this.navigationLayers[this.currentLayerIndex - 1];
        if (typeof currentLayer.layerWillDisappear === "function") {
          currentLayer.layerWillDisappear();
        }
        if (typeof nextLayer.layerWillAppear === "function") {
          nextLayer.layerWillAppear();
        }
        this.animationPop(currentLayer, nextLayer);
        return Utils.delay(this.animationTime, (function(_this) {
          return function() {
            _this.navigationLayers.pop(currentLayer);
            _this.currentLayerIndex--;
            currentLayer.destroy();
            return _this.lock = false;
          };
        })(this));
      } else {
        return this.lock = false;
      }
    }
  };

  NavigationComponent.prototype._defaultAnimationPush = function(fromLayer, toLayer) {
    var shadowLayer;
    shadowLayer = new Layer({
      superLayer: fromLayer,
      width: fromLayer.width,
      height: fromLayer.height,
      name: "shadowLayer",
      backgroundColor: "black",
      opacity: 0
    });
    shadowLayer.animate({
      properties: {
        opacity: 0.2
      },
      curve: _ANIMATION_CURVE,
      time: _ANIMATION_TIME
    });
    fromLayer.animate({
      properties: {
        x: -this.width * 0.25
      },
      curve: _ANIMATION_CURVE,
      time: _ANIMATION_TIME
    });
    toLayer.shadowColor = "rgba(0,0,0,0.2)";
    toLayer.shadowX = -10;
    toLayer.shadowBlur = 14;
    toLayer.x = this.width + (-toLayer.shadowX);
    toLayer.animate({
      properties: {
        x: 0
      },
      curve: _ANIMATION_CURVE,
      time: _ANIMATION_TIME
    });
    if (toLayer.title) {
      return this.headerLayer.html = toLayer.title;
    }
  };

  NavigationComponent.prototype._defaultAnimationPop = function(fromLayer, toLayer) {
    var shadowLayer, shadowLayerAnimation;
    fromLayer.animate({
      properties: {
        x: this.width + (-fromLayer.shadowX)
      },
      curve: _ANIMATION_CURVE,
      time: _ANIMATION_TIME
    });
    toLayer.animate({
      properties: {
        x: 0
      },
      curve: _ANIMATION_CURVE,
      time: _ANIMATION_TIME
    });
    shadowLayer = toLayer.subLayersByName("shadowLayer")[0];
    shadowLayerAnimation = new Animation({
      layer: shadowLayer,
      properties: {
        opacity: 0
      },
      curve: _ANIMATION_CURVE,
      time: _ANIMATION_TIME
    });
    shadowLayerAnimation.start();
    shadowLayerAnimation.on("end", function() {
      return shadowLayer.destroy();
    });
    if (toLayer.title) {
      return this.headerLayer.html = toLayer.title;
    }
  };

  return NavigationComponent;

})(Layer);



},{}]},{},[])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvamF2aWVyL1Byb2dyYW1hY2lvbi9naXRodWIvRnJhbWlPUy9uYXZpZ2F0aW9uQ29tcG9uZW50RGVmYXVsdC5mcmFtZXIvbW9kdWxlcy9uYXZpZ2F0aW9uQ29tcG9uZW50LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBLElBQUE7NkJBQUE7O0FBQUEsT0FBYSxDQUFDO0FBRWIsTUFBQSw4REFBQTs7QUFBQSx5Q0FBQSxDQUFBOztBQUFBLEVBQUEsZUFBQSxHQUFrQixHQUFsQixDQUFBOztBQUFBLEVBQ0EsZ0JBQUEsR0FBbUIsNkJBRG5CLENBQUE7O0FBQUEsRUFFQSwyQkFBQSxHQUE4QixDQUY5QixDQUFBOztBQUlhLEVBQUEsNkJBQUMsT0FBRCxHQUFBO0FBR1osUUFBQSxnQ0FBQTtBQUFBLElBSGEsSUFBQyxDQUFBLDRCQUFELFVBQVMsRUFHdEIsQ0FBQTtBQUFBLElBQUEsSUFBRyxDQUFBLElBQUssQ0FBQSxPQUFPLENBQUMsWUFBaEI7QUFDQyxZQUFVLElBQUEsS0FBQSxDQUFNLDZFQUFOLENBQVYsQ0FBQTtBQUNBLFlBQUEsQ0FGRDtLQUFBOztVQUlRLENBQUMsUUFBbUIsTUFBTSxDQUFDO0tBSm5DOztXQUtRLENBQUMsU0FBbUIsTUFBTSxDQUFDO0tBTG5DOztXQU1RLENBQUMsT0FBbUI7S0FONUI7O1dBT1EsQ0FBQyxrQkFBbUI7S0FQNUI7O1dBUVEsQ0FBQyxPQUFZLHNCQUFBLEdBQXlCO0tBUjlDO0FBQUEsSUFVQSxxREFBTSxJQUFDLENBQUEsT0FBUCxDQVZBLENBQUE7QUFBQSxJQVdBLDJCQUFBLEVBWEEsQ0FBQTtBQUFBLElBYUEsSUFBQyxDQUFBLGdCQUFELEdBQXNCLEVBYnRCLENBQUE7QUFBQSxJQWNBLElBQUMsQ0FBQSxhQUFELEdBQW1CLElBQUMsQ0FBQSxPQUFPLENBQUMsYUFB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LE1BR0EsSUFBQSxFQUFNLGVBSE47S0FERCxDQUFBLENBQUE7QUFBQSxJQUtBLE9BQU8sQ0FBQyxPQUFSLENBQ0M7QUFBQSxNQUFBLFVBQUEsRUFDQztBQUFBLFFBQUEsQ0FBQSxFQUFHLENBQUg7T0FERDtBQUFBLE1BRUEsS0FBQSxFQUFPLGdCQUZQO0FBQUEsTUFHQSxJQUFBLEVBQU0sZUFITjtLQURELENBTEEsQ0FBQTtBQUFBLElBVUEsV0FBQSxHQUFjLE9BQU8sQ0FBQyxlQUFSLENBQXdCLGFBQXhCLENBQXVDLENBQUEsQ0FBQSxDQVZyRCxDQUFBO0FBQUEsSUFXQSxvQkFBQSxHQUEyQixJQUFBLFNBQUEsQ0FDMUI7QUFBQSxNQUFBLEtBQUEsRUFBTyxXQUFQO0FBQUEsTUFDQSxVQUFBLEVBQ0M7QUFBQSxRQUFBLE9BQUEsRUFBUyxDQUFUO09BRkQ7QUFBQSxNQUdBLEtBQUEsRUFBTyxnQkFIUDtBQUFBLE1BSUEsSUFBQSxFQUFNLGVBSk47S0FEMEIsQ0FYM0IsQ0FBQTtBQUFBLElBaUJBLG9CQUFvQixDQUFDLEtBQXJCLENBQUEsQ0FqQkEsQ0FBQTtBQUFBLElBa0JBLG9CQUFvQixDQUFDLEVBQXJCLENBQXdCLEtBQXhCLEVBQStCLFNBQUEsR0FBQTthQUM5QixXQUFXLENBQUMsT0FBWixDQUFBLEVBRDhCO0lBQUEsQ0FBL0IsQ0FsQkEsQ0FBQTtBQW9CQSxJQUFBLElBQUcsT0FBTyxDQUFDLEtBQVg7YUFDRSxJQUFDLENBQUEsV0FBVyxDQUFDLElBQWIsR0FBb0IsT0FBTyxDQUFDLE1BRDlCO0tBckJxQjtFQUFBLENBMUh0QixDQUFBOzs2QkFBQTs7R0FGeUMsTUFBMUMsQ0FBQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJjbGFzcyBleHBvcnRzLk5hdmlnYXRpb25Db21wb25lbnQgZXh0ZW5kcyBMYXllclxuXHRcblx0X0FOSU1BVElPTl9USU1FID0gMC40XG5cdF9BTklNQVRJT05fQ1VSVkUgPSBcImN1YmljLWJlemllciguNiwgLjEsIC4zLCAxKVwiXG5cdG5hdmlnYXRpb25Db21wb25lbnRzQ291bnRlciA9IDFcblx0XG5cdGNvbnN0cnVjdG9yOiAoQG9wdGlvbnM9e30pIC0+XG5cblx0XHQjIENoZWNrIHJlcXVpcmVkIHBhcmFtc1xuXHRcdGlmIG5vdCBAb3B0aW9ucy5pbml0aWFsTGF5ZXJcblx0XHRcdHRocm93IG5ldyBFcnJvcihcIkNhbid0IGluaXRpYWxpemUgTmF2aWdhdGlvbkNvbXBvbmVudDogcGFyYW1ldGVyICdpbml0aWFsTGF5ZXInIGlzIHJlcXVpcmVkLlwiKVxuXHRcdFx0cmV0dXJuXG5cblx0XHRAb3B0aW9ucy53aWR0aCAgICAgICAgICAgPz0gU2NyZWVuLndpZHRoXG5cdFx0QG9wdGlvbnMuaGVpZ2h0ICAgICAgICAgID89IFNjcmVlbi5oZWlnaHRcblx0XHRAb3B0aW9ucy5jbGlwICAgICAgICAgICAgPz0gdHJ1ZVxuXHRcdEBvcHRpb25zLmJhY2tncm91bmRDb2xvciA/PSBcInRyYW5zcGFyZW50XCJcblx0XHRAb3B0aW9ucy5uYW1lIFx0XHRcdCA/PSBcIk5hdmlnYXRpb25Db21wb25lbnQgXCIgKyBuYXZpZ2F0aW9uQ29tcG9uZW50c0NvdW50ZXJcblxuXHRcdHN1cGVyIEBvcHRpb25zXG5cdFx0bmF2aWdhdGlvbkNvbXBvbmVudHNDb3VudGVyKytcblxuXHRcdEBuYXZpZ2F0aW9uTGF5ZXJzICAgPSBbXVxuXHRcdEBhbmltYXRpb25UaW1lIFx0XHQ9IEBvcHRpb25zLmFuaW1hdGlvblRpbWUgb3IgX0FOSU1BVElPTl9USU1FXG5cdFx0QGFuaW1hdGlvblB1c2ggXHRcdD0gQG9wdGlvbnMuYW5pbWF0aW9uUHVzaCBvciBAX2RlZmF1bHRBbmltYXRpb25QdXNoXG5cdFx0QGFuaW1hdGlvblBvcFx0XHQ9IEBvcHRpb25zLmFuaW1hdGlvblBvcCBvciBAX2RlZmF1bHRBbmltYXRpb25Qb3Bcblx0XHRAY3VycmVudExheWVySW5kZXggPSAtMVxuXHRcdEBsb2NrID0gZmFsc2Vcblx0XHRcblx0XHRpZiBAb3B0aW9ucy5oZWFkZXJMYXllclxuXHRcdFx0QGhlYWRlckxheWVyID0gQG9wdGlvbnMuaGVhZGVyTGF5ZXJcblx0XHRcdEBhZGRTdWJMYXllcihAaGVhZGVyTGF5ZXIpXG5cdFx0ZWxzZSAjIERlZmF1bHQgaGVhZGVyXG5cdFx0XHRAaGVhZGVyTGF5ZXIgPSBuZXcgTGF5ZXJcblx0XHRcdFx0d2lkdGg6IEB3aWR0aFxuXHRcdFx0XHRoZWlnaHQ6IDg4XG5cdFx0XHRcdGJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDI0OCwgMjQ4LCAyNDgsIDAuOSlcIlxuXHRcdFx0aWYgRnJhbWVyLkRldmljZS5kZXZpY2VUeXBlLmluZGV4T2YoXCJpcGhvbmUtNnBsdXNcIikgPj0gMFxuXHRcdFx0XHRAaGVhZGVyTGF5ZXIuaGVpZ2h0ID0gMTMyXG5cblx0XHRcdEBoZWFkZXJMYXllci5zdHlsZSA9XG5cdFx0XHRcdFwiZm9udC1zaXplXCIgOiBAaGVhZGVyTGF5ZXIuaGVpZ2h0IC8gMi41ICsgXCJweFwiXG5cdFx0XHRcdFwiY29sb3JcIiA6IFwiYmxhY2tcIlxuXHRcdFx0XHRcImxpbmUtaGVpZ2h0XCIgOiBAaGVhZGVyTGF5ZXIuaGVpZ2h0ICsgXCJweFwiXG5cdFx0XHRcdFwiZm9udC13ZWlnaHRcIiA6IFwiNTAwXCJcblx0XHRcdFx0XCJ0ZXh0LWFsaWduXCIgOiBcImNlbnRlclwiXG5cdFx0XHRcdFwiZm9udC1mYW1pbHlcIjogXCInSGVsdmV0aWNhIE5ldWUnLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmXCJcblx0XG5cblx0XHRpZiBAb3B0aW9ucy5pbml0aWFsTGF5ZXJcblx0XHRcdEBuYXZpZ2F0aW9uTGF5ZXJzID0gW0BvcHRpb25zLmluaXRpYWxMYXllcl1cblx0XHRcdEBjdXJyZW50TGF5ZXJJbmRleCA9IDBcblx0XHRcdEBhZGRTdWJMYXllcihAb3B0aW9ucy5pbml0aWFsTGF5ZXIpXG5cdFx0XHRpZiBAb3B0aW9ucy5pbml0aWFsTGF5ZXIudGl0bGVcblx0XHRcdFx0QGhlYWRlckxheWVyLmh0bWwgPSBAb3B0aW9ucy5pbml0aWFsTGF5ZXIudGl0bGVcblxuXHRwdXNoOiAobGF5ZXIpIC0+XG5cdFx0aWYgbm90IEBsb2NrXG5cdFx0XHRAbG9jayA9IHRydWVcblx0XHRcdEBuYXZpZ2F0aW9uTGF5ZXJzLnB1c2gobGF5ZXIpXG5cdFx0XHRAYWRkU3ViTGF5ZXIobGF5ZXIpXG5cdFx0XHRjdXJyZW50TGF5ZXIgPSBAbmF2aWdhdGlvbkxheWVyc1tAY3VycmVudExheWVySW5kZXhdXG5cdFx0XHRuZXh0TGF5ZXIgPSBsYXllclxuXHRcdFx0aWYgdHlwZW9mIGN1cnJlbnRMYXllci5sYXllcldpbGxEaXNhcHBlYXIgaXMgXCJmdW5jdGlvblwiXG5cdFx0XHRcdGN1cnJlbnRMYXllci5sYXllcldpbGxEaXNhcHBlYXIoKVxuXHRcdFx0aWYgdHlwZW9mIG5leHRMYXllci5sYXllcldpbGxBcHBlYXIgaXMgXCJmdW5jdGlvblwiXG5cdFx0XHRcdG5leHRMYXllci5sYXllcldpbGxBcHBlYXIoKVxuXHRcdFx0QGN1cnJlbnRMYXllckluZGV4Kytcblx0XHRcdEBhbmltYXRpb25QdXNoKGN1cnJlbnRMYXllciwgbmV4dExheWVyKVxuXHRcdFx0VXRpbHMuZGVsYXkgQGFuaW1hdGlvblRpbWUsID0+XG5cdFx0XHRcdEBsb2NrID0gZmFsc2Vcblx0XHRlbHNlXG5cdFx0XHQjIElmIHRoZXJlIHdhcyBhIHRyYW5zaXRpb25pbmcgZ29pbmcgb24sIGp1c3QgcmVtb3ZlIHRoZSBuZXcgbGF5ZXJcblx0XHRcdGxheWVyLmRlc3Ryb3koKVxuXHRcdFxuXHRwb3A6IC0+XG5cdFx0aWYgbm90IEBsb2NrXG5cdFx0XHRAbG9jayA9IHRydWVcblx0XHRcdGlmIEBjdXJyZW50TGF5ZXJJbmRleCA+IDBcblx0XHRcdFx0Y3VycmVudExheWVyID0gQG5hdmlnYXRpb25MYXllcnNbQGN1cnJlbnRMYXllckluZGV4XVxuXHRcdFx0XHRuZXh0TGF5ZXIgPSBAbmF2aWdhdGlvbkxheWVyc1tAY3VycmVudExheWVySW5kZXggLSAxXVxuXHRcdFx0XHRpZiB0eXBlb2YgY3VycmVudExheWVyLmxheWVyV2lsbERpc2FwcGVhciBpcyBcImZ1bmN0aW9uXCJcblx0XHRcdFx0XHRjdXJyZW50TGF5ZXIubGF5ZXJXaWxsRGlzYXBwZWFyKClcblx0XHRcdFx0aWYgdHlwZW9mIG5leHRMYXllci5sYXllcldpbGxBcHBlYXIgaXMgXCJmdW5jdGlvblwiXG5cdFx0XHRcdFx0bmV4dExheWVyLmxheWVyV2lsbEFwcGVhcigpXG5cdFx0XHRcdEBhbmltYXRpb25Qb3AoY3VycmVudExheWVyLCBuZXh0TGF5ZXIpXG5cdFx0XHRcdFV0aWxzLmRlbGF5IEBhbmltYXRpb25UaW1lLCA9PlxuXHRcdFx0XHRcdEBuYXZpZ2F0aW9uTGF5ZXJzLnBvcChjdXJyZW50TGF5ZXIpXG5cdFx0XHRcdFx0QGN1cnJlbnRMYXllckluZGV4LS1cblx0XHRcdFx0XHRjdXJyZW50TGF5ZXIuZGVzdHJveSgpXG5cdFx0XHRcdFx0QGxvY2sgPSBmYWxzZVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHRAbG9jayA9IGZhbHNlXG5cblx0X2RlZmF1bHRBbmltYXRpb25QdXNoOiAoZnJvbUxheWVyLCB0b0xheWVyKSAtPlxuXHRcdHNoYWRvd0xheWVyID0gbmV3IExheWVyXG5cdFx0XHRzdXBlckxheWVyOiBmcm9tTGF5ZXJcblx0XHRcdHdpZHRoOiBmcm9tTGF5ZXIud2lkdGhcblx0XHRcdGhlaWdodDogZnJvbUxheWVyLmhlaWdodFxuXHRcdFx0bmFtZTogXCJzaGFkb3dMYXllclwiXG5cdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IFwiYmxhY2tcIlxuXHRcdFx0b3BhY2l0eTogMFxuXHRcdHNoYWRvd0xheWVyLmFuaW1hdGVcblx0XHRcdHByb3BlcnRpZXM6XG5cdFx0XHRcdG9wYWNpdHk6IDAuMlxuXHRcdFx0Y3VydmU6IF9BTklNQVRJT05fQ1VSVkVcblx0XHRcdHRpbWU6IF9BTklNQVRJT05fVElNRVxuXHRcdGZyb21MYXllci5hbmltYXRlXG5cdFx0XHRwcm9wZXJ0aWVzOlxuXHRcdFx0XHR4OiAtQHdpZHRoICogMC4yNVxuXHRcdFx0Y3VydmU6IF9BTklNQVRJT05fQ1VSVkVcblx0XHRcdHRpbWU6IF9BTklNQVRJT05fVElNRVxuXHRcdHRvTGF5ZXIuc2hhZG93Q29sb3IgPSBcInJnYmEoMCwwLDAsMC4yKVwiXG5cdFx0dG9MYXllci5zaGFkb3dYID0gLTEwXG5cdFx0dG9MYXllci5zaGFkb3dCbHVyID0gMTRcblx0XHR0b0xheWVyLnggPSBAd2lkdGggKyAoLXRvTGF5ZXIuc2hhZG93WClcblx0XHR0b0xheWVyLmFuaW1hdGVcblx0XHRcdHByb3BlcnRpZXM6XG5cdFx0XHRcdHg6IDBcblx0XHRcdGN1cnZlOiBfQU5JTUFUSU9OX0NVUlZFXG5cdFx0XHR0aW1lOiBfQU5JTUFUSU9OX1RJTUVcblx0XHRpZiB0b0xheWVyLnRpdGxlXG5cdFx0XHRcdEBoZWFkZXJMYXllci5odG1sID0gdG9MYXllci50aXRsZVxuXG5cdF9kZWZhdWx0QW5pbWF0aW9uUG9wOiAoZnJvbUxheWVyLCB0b0xheWVyKSAtPlxuXHRcdGZyb21MYXllci5hbmltYXRlXG5cdFx0XHRwcm9wZXJ0aWVzOlxuXHRcdFx0XHR4OiBAd2lkdGggKyAoLWZyb21MYXllci5zaGFkb3dYKVxuXHRcdFx0Y3VydmU6IF9BTklNQVRJT05fQ1VSVkVcblx0XHRcdHRpbWU6IF9BTklNQVRJT05fVElNRVxuXHRcdHRvTGF5ZXIuYW5pbWF0ZVxuXHRcdFx0cHJvcGVydGllczpcblx0XHRcdFx0eDogMFxuXHRcdFx0Y3VydmU6IF9BTklNQVRJT05fQ1VSVkVcblx0XHRcdHRpbWU6IF9BTklNQVRJT05fVElNRVxuXHRcdHNoYWRvd0xheWVyID0gdG9MYXllci5zdWJMYXllcnNCeU5hbWUoXCJzaGFkb3dMYXllclwiKVswXVxuXHRcdHNoYWRvd0xheWVyQW5pbWF0aW9uID0gbmV3IEFuaW1hdGlvblxuXHRcdFx0bGF5ZXI6IHNoYWRvd0xheWVyXG5cdFx0XHRwcm9wZXJ0aWVzOlxuXHRcdFx0XHRvcGFjaXR5OiAwXG5cdFx0XHRjdXJ2ZTogX0FOSU1BVElPTl9DVVJWRVxuXHRcdFx0dGltZTogX0FOSU1BVElPTl9USU1FXG5cdFx0c2hhZG93TGF5ZXJBbmltYXRpb24uc3RhcnQoKVxuXHRcdHNoYWRvd0xheWVyQW5pbWF0aW9uLm9uIFwiZW5kXCIsIC0+XG5cdFx0XHRzaGFkb3dMYXllci5kZXN0cm95KClcblx0XHRpZiB0b0xheWVyLnRpdGxlXG5cdFx0XHRcdEBoZWFkZXJMYXllci5odG1sID0gdG9MYXllci50aXRsZVxuXHRcdFxuIl19
